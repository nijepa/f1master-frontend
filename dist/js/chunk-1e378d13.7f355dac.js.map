{"version":3,"sources":["webpack:///./src/views/SuperLicense.vue?c26b","webpack:///./src/views/SuperLicense.vue","webpack:///./src/components/superlicense/SignIn.vue","webpack:///./node_modules/vee-validate/dist/vee-validate.esm.js","webpack:///./src/components/superlicense/SignIn.vue?9551","webpack:///./src/views/SuperLicense.vue?fae4","webpack:///./src/components/superlicense/SignIn.vue?0736"],"names":["class","_createBlock","_Transition","appear","enter-active-class","leave-active-class","_createElementVNode","_createVNode","_component_SignIn","for","_createElementBlock","_toDisplayString","$setup","formName","_component_router_link","to","_hoisted_5","_hoisted_6","emailLogin","$event","type","placeholder","password","id","keepConnected","_hoisted_9","onClick","isCallable","fn","isNullOrUndefined","value","undefined","isObject","obj","Array","isArray","isIndex","Number","toNumber","n","parseFloat","isNaN","RULES","resolveRule","FormContextKey","Symbol","FieldContextKey","IS_ABSENT","isLocator","__locatorRef","isHTMLTag","tag","includes","isFileInputNode","attrs","isYupValidator","validate","hasCheckedAttr","isContainerValue","isEmptyContainer","length","Object","keys","isNotNestedPath","path","test","isNativeMultiSelect","el","isNativeSelect","multiple","tagName","isNativeMultiSelectNode","hasTruthyBindingValue","shouldHaveValueBinding","isFormSubmitEvent","evt","isEvent","target","Event","srcElement","isPropPresent","prop","cleanupNonNestedPath","replace","getFromPath","object","fallback","resolvedValue","split","filter","Boolean","reduce","acc","propKey","setInPath","i","unset","key","splice","unsetPath","pathValues","map","_","idx","slice","join","keysOf","record","injectWithSelf","symbol","def","vm","provides","warn","message","resolveNextCheckboxValue","currentValue","checkedValue","uncheckedValue","newVal","indexOf","push","throttle","func","limit","inThrottle","lastResult","args","context","this","setTimeout","apply","debounceAsync","inner","ms","timer","resolves","window","clearTimeout","result","forEach","r","Promise","resolve","normalizeChildren","slotProps","slots","default","_a","_b","call","getBoundValue","hasValueBinding","_value","normalizeEventValue","input","files","from","options","opt","selected","disabled","selectedOption","find","normalizeRules","rules","defineProperty","writable","enumerable","configurable","_$$isNormalized","prev","curr","params","normalizeParams","buildParams","rule","parsedRule","parseRule","name","provided","mapValueToLocator","createLocator","RegExp","locator","crossTable","val","extractLocators","DEFAULT_CONFIG","generateMessage","field","bails","validateOnBlur","validateOnChange","validateOnInput","validateOnModelUpdate","currentConfig","assign","getConfig","async","shouldBail","formData","values","_validate","errors","valid","validateFieldWithYup","ctx","form","isValid","_generateFieldError","normalizedContext","rulesKeys","_test","error","validator","opts","abortEarly","then","catch","err","Error","fillTargetValues","fieldCtx","normalize","param","validateYupSchema","schema","errorObjects","results","messages","validateObjectSchema","paths","validations","_c","fieldResult","names","bailsMap","isAllValid","validationResults","all","set","klona","get","x","k","list","tmp","str","prototype","toString","create","__proto__","Set","add","Map","Date","source","flags","constructor","buffer","getOwnPropertySymbols","getOwnPropertyDescriptor","getOwnPropertyNames","hasOwnProperty","es6","equal","a","b","size","entries","has","ArrayBuffer","isView","valueOf","ID_COUNTER","useFieldState","init","initialValue","setInitialValue","_useFieldValue","modelValue","standalone","errorMessage","setErrors","_useFieldErrors","meta","_useFieldMeta","MAX_SAFE_INTEGER","setState","state","touched","shouldInjectForm","modelRef","resolveInitialValue","initialValues","setFieldInitialValue","stageInitialValue","setFieldValue","pending","validated","dirty","immediate","flush","normalizeErrors","errorBag","setFieldErrorBag","API","sendInspectorState","INSPECTOR_ID","sendInspectorTree","useField","useCheckboxField","validateOnMount","label","validateOnValueUpdate","normalizeOptions","handleBlur","normalizedRules","rulesValue","extractRuleFromSchema","validateCurrentValue","mode","validateSchema","validateWithStateMutation","validateValidStateOnly","validate$1","handleChange","e","shouldValidate","newValue","setTouched","isTouched","unwatchValue","watchValue","deep","resetField","setValue","handleReset","oldValue","register","unregister","dependencies","rulesVal","deps","dep","depAcc","depName","depValue","oldDeps","defaults","valueProp","fieldName","patchCheckboxApi","checked","checkedVal","handleCheckboxChange","inheritAttrs","props","as","String","required","Function","modelModifiers","hasModelEvents","validateField","onChangeHandler","emit","handleInput","onInputHandler","fieldProps","resolveValidationTriggers","baseOnBlur","onBlur","baseOnInput","onInput","baseOnChange","onChange","resolveTag","newModelValue","applyModifiers","expose","reset","children","_d","modifiers","number","FORM_COUNTER","useForm","formId","RESET_LOCK","fieldsByPath","isSubmitting","submitCount","fieldArraysLookup","formValues","setErrorBag","useErrorBag","initialErrors","bag","getFirstFieldAtPath","fieldOrGroup","fieldExists","fieldNames","fieldBailsMap","originalInitialValues","setInitialValues","useFormInitialValues","useFormMeta","validationSchema","formCtx","registerField","unregisterField","setValues","setFieldError","setFieldTouched","resetForm","handleSubmit","unsetInitialValue","isFieldGroup","applyFieldMutation","mutation","mutateAllFields","fields","force","fieldInstance","clonedValue","f","insertFieldAtPath","rawField","fieldPath","fieldAtPath","removeFieldFromPath","findIndex","newPath","oldPath","initialErrorMessage","validation","every","onValidationError","preventDefault","stopPropagation","returnVal","_validateSchema","schemaValue","formResult","debouncedSchemaValidation","fieldsById","currentErrorsPaths","wasValidated","some","submitForm","submit","initialTouched","currentValues","MERGE_STRATEGIES","isDirty","calculateFlags","flat","flag","mergeMethod","providedValues","updateFields","wasTouched","normalizeErrorItem","onSubmit","onInvalidSubmit","handleFormReset","onReset","handleScopedSlotSubmit","onSuccess","formAttrs","novalidate","FIELD_ARRAY_COUNTER","useFieldArray","arrayPath","noOp","noOpApi","remove","swap","insert","update","prepend","entryCounter","initFields","createEntry","updateEntryFlags","fieldsLength","entry","isFirst","isLast","pathName","pathValue","normalizedPathValue","indexA","indexB","newFields","temp","tempEntry","arr","unshift","role","setup","reactive","__exports__","components","SignIn","render"],"mappings":"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","file":"js/chunk-1e378d13.7f355dac.js","sourcesContent":["export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--7-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--7-oneOf-1-1!../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--7-oneOf-1-2!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader-v16/dist/index.js??ref--1-1!./SuperLicense.vue?vue&type=style&index=0&id=d35e533e&scoped=true&lang=css\"","<template>\r\n  <transition\r\n    appear\r\n    enter-active-class=\"animated fadeIn\"\r\n    leave-active-class=\"animated fadeOut\"\r\n  >\r\n    <div class=\"wrap\">\r\n      <SignIn />\r\n    </div>\r\n  </transition>\r\n</template>\r\n\r\n<script>\r\nimport SignIn from \"@/components/superlicense/SignIn.vue\";\r\nexport default {\r\n  components: {\r\n    SignIn,\r\n  },\r\n  setup() {},\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.wrap {\r\n  display: grid;\r\n  justify-content: center;\r\n  align-content: center;\r\n}\r\n</style>\r\n","<template>\r\n  <div class=\"card\">\r\n    <div class=\"header\">\r\n      <div class=\"title\">\r\n        <h4>{{ state.formName }}</h4>\r\n      </div>\r\n\r\n      <div class=\"links\">\r\n        <router-link to=\"/registration\"><a>Not a member yet?</a></router-link>\r\n        <router-link to=\"/recovery-password\"\r\n          ><a>Recovery Password?</a></router-link\r\n        >\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"inputs\">\r\n      <input\r\n        v-model=\"state.emailLogin\"\r\n        type=\"email\"\r\n        placeholder=\"email\"\r\n        class=\"emailLogin\"\r\n      />\r\n      <span>{{ errorMessage }}</span>\r\n      <input\r\n        v-model=\"state.password\"\r\n        type=\"password\"\r\n        placeholder=\"password\"\r\n        class=\"password\"\r\n      />\r\n      <span>{{ errorMessage }}</span>\r\n    </div>\r\n\r\n    <div class=\"keepCon\">\r\n      <input\r\n        id=\"keep\"\r\n        v-model=\"state.keepConnected\"\r\n        type=\"checkbox\"\r\n        class=\"checkbox\"\r\n      />\r\n      <label for=\"keep\">Keep Connected</label>\r\n    </div>\r\n\r\n    <div class=\"btn\">\r\n      <button @click.prevent=\"submitForm\">CONFIRM</button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n// import useValidate from \"@vuelidate/core\";\r\n// import { required, email, minLength } from \"@vuelidate/validators\";\r\nimport { reactive } from \"vue\";\r\nimport { useField } from \"vee-validate\";\r\nexport default {\r\n  setup() {\r\n    const state = reactive({\r\n      emailLogin: \"\",\r\n      password: \"\",\r\n      keepConnected: false,\r\n      formName: \"SignIn\",\r\n    });\r\n    function validateField(value) {\r\n      if (!value) {\r\n        return \"this field is required\";\r\n      }\r\n\r\n      if (value < 8) {\r\n        return \"this field must contain at least 8 characters\";\r\n      }\r\n\r\n      return true;\r\n    }\r\n\r\n    const { value, errorMessage } = useField(state.emailLogin, validateField);\r\n\r\n    const submitForm = () => {\r\n      validateField(state.emailLogin);\r\n    };\r\n\r\n    return { state, errorMessage, value, submitForm };\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.wrap {\r\n  display: grid;\r\n  justify-content: center;\r\n  padding: 10px 20px;\r\n}\r\n.card {\r\n  display: grid;\r\n  justify-items: center;\r\n  width: 400px;\r\n  height: auto;\r\n  background: #060606;\r\n  border-radius: 4px;\r\n  border: solid 3px #070707;\r\n  box-shadow: #272727 0px 0px 6px;\r\n  transition: 600ms;\r\n}\r\n.card:hover {\r\n  /* box-shadow: darkgray 0px 0px 6px; */\r\n  transition: 600ms;\r\n  cursor: pointer;\r\n}\r\n.header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  padding: 30px;\r\n  width: 100%;\r\n}\r\nh4 {\r\n  font-weight: 700;\r\n  text-shadow: 2px 2px 4px black;\r\n  letter-spacing: 1px;\r\n  box-shadow: none;\r\n  border: none;\r\n  font-size: 2.2rem;\r\n}\r\nh4:hover {\r\n  color: white;\r\n}\r\n.links {\r\n  display: grid;\r\n  justify-items: end;\r\n  text-align: left;\r\n}\r\na {\r\n  font-weight: 700;\r\n  letter-spacing: 0.8px;\r\n  text-decoration: none;\r\n  color: #999999;\r\n  text-shadow: 2px 2px 3px black;\r\n  padding: 2px 0;\r\n  /* background: black; */\r\n}\r\na :hover {\r\n  color: lightgreen;\r\n  transition: 500ms;\r\n}\r\n.dataInputs {\r\n  display: grid;\r\n  justify-content: center;\r\n  align-content: center;\r\n  width: 400px;\r\n}\r\ninput {\r\n  display: grid;\r\n  justify-items: center;\r\n  background: #101010;\r\n  height: 30px;\r\n  border-radius: 4px;\r\n  width: 300px;\r\n  border: none;\r\n  color: #ddd;\r\n  padding: 25px;\r\n  margin-top: 20px;\r\n  letter-spacing: 1.5px;\r\n  font-size: 1rem;\r\n}\r\n.keepCon {\r\n  display: flex;\r\n  align-items: end;\r\n  column-gap: 1em;\r\n  color: #999999;\r\n  width: 300px;\r\n  padding: 1em 0;\r\n}\r\n\r\n.keepCon label {\r\n  text-shadow: 2px 2px 3px black;\r\n  color: #999999;\r\n  cursor: pointer;\r\n}\r\ninput[type=\"checkbox\"]:checked + label {\r\n  color: lightgreen;\r\n}\r\n.keepCon p {\r\n  display: inline;\r\n  /* background: black; */\r\n  padding: 2px;\r\n}\r\n.keepCon,\r\nlabel:active {\r\n  color: lightgreen;\r\n}\r\n.checkbox {\r\n  width: 20px;\r\n  height: 20px;\r\n  border: #999999;\r\n  /* background: black;     */\r\n}\r\n.btn {\r\n  display: grid;\r\n  padding: 20px;\r\n}\r\nbutton {\r\n  display: grid;\r\n  width: 200px;\r\n  padding: 0 10px;\r\n  height: 35px;\r\n  border-radius: 4px;\r\n  align-content: center;\r\n  align-self: center;\r\n  text-align: center;\r\n  text-decoration: none;\r\n  justify-self: center;\r\n  font-family: \"Play\", cursive;\r\n  font-weight: 700;\r\n  cursor: pointer;\r\n  transition: 0.4s;\r\n  background: #fdd800;\r\n  /* border: none; */\r\n  border: 2px solid transparent;\r\n  font-size: 0.8rem;\r\n  text-decoration: uppercase;\r\n}\r\nbutton:hover {\r\n  border: 2px solid #ffea72;\r\n}\r\n</style>\r\n","/**\n  * vee-validate v4.5.10\n  * (c) 2022 Abdelrahman Awad\n  * @license MIT\n  */\nimport { inject, getCurrentInstance, warn as warn$1, ref, unref, computed, reactive, watch, onUnmounted, nextTick, onMounted, provide, isRef, onBeforeUnmount, defineComponent, toRef, resolveDynamicComponent, h, watchEffect, markRaw, readonly } from 'vue';\nimport { setupDevtoolsPlugin } from '@vue/devtools-api';\n\nfunction isCallable(fn) {\r\n    return typeof fn === 'function';\r\n}\r\nfunction isNullOrUndefined(value) {\r\n    return value === null || value === undefined;\r\n}\r\nconst isObject = (obj) => obj !== null && !!obj && typeof obj === 'object' && !Array.isArray(obj);\r\nfunction isIndex(value) {\r\n    return Number(value) >= 0;\r\n}\r\nfunction toNumber(value) {\r\n    const n = parseFloat(value);\r\n    return isNaN(n) ? value : n;\r\n}\n\nconst RULES = {};\r\n/**\r\n * Adds a custom validator to the list of validation rules.\r\n */\r\nfunction defineRule(id, validator) {\r\n    // makes sure new rules are properly formatted.\r\n    guardExtend(id, validator);\r\n    RULES[id] = validator;\r\n}\r\n/**\r\n * Gets an already defined rule\r\n */\r\nfunction resolveRule(id) {\r\n    return RULES[id];\r\n}\r\n/**\r\n * Guards from extension violations.\r\n */\r\nfunction guardExtend(id, validator) {\r\n    if (isCallable(validator)) {\r\n        return;\r\n    }\r\n    throw new Error(`Extension Error: The validator '${id}' must be a function.`);\r\n}\n\nconst FormContextKey = Symbol('vee-validate-form');\r\nconst FieldContextKey = Symbol('vee-validate-field-instance');\r\nconst IS_ABSENT = Symbol('Default empty value');\n\nfunction isLocator(value) {\r\n    return isCallable(value) && !!value.__locatorRef;\r\n}\r\n/**\r\n * Checks if an tag name is a native HTML tag and not a Vue component\r\n */\r\nfunction isHTMLTag(tag) {\r\n    return ['input', 'textarea', 'select'].includes(tag);\r\n}\r\n/**\r\n * Checks if an input is of type file\r\n */\r\nfunction isFileInputNode(tag, attrs) {\r\n    return isHTMLTag(tag) && attrs.type === 'file';\r\n}\r\nfunction isYupValidator(value) {\r\n    return !!value && isCallable(value.validate);\r\n}\r\nfunction hasCheckedAttr(type) {\r\n    return type === 'checkbox' || type === 'radio';\r\n}\r\nfunction isContainerValue(value) {\r\n    return isObject(value) || Array.isArray(value);\r\n}\r\n/**\r\n * True if the value is an empty object or array\r\n */\r\nfunction isEmptyContainer(value) {\r\n    if (Array.isArray(value)) {\r\n        return value.length === 0;\r\n    }\r\n    return isObject(value) && Object.keys(value).length === 0;\r\n}\r\n/**\r\n * Checks if the path opted out of nested fields using `[fieldName]` syntax\r\n */\r\nfunction isNotNestedPath(path) {\r\n    return /^\\[.+\\]$/i.test(path);\r\n}\r\n/**\r\n * Checks if an element is a native HTML5 multi-select input element\r\n */\r\nfunction isNativeMultiSelect(el) {\r\n    return isNativeSelect(el) && el.multiple;\r\n}\r\n/**\r\n * Checks if an element is a native HTML5 select input element\r\n */\r\nfunction isNativeSelect(el) {\r\n    return el.tagName === 'SELECT';\r\n}\r\n/**\r\n * Checks if a tag name with attrs object will render a native multi-select element\r\n */\r\nfunction isNativeMultiSelectNode(tag, attrs) {\r\n    // The falsy value array is the values that Vue won't add the `multiple` prop if it has one of these values\r\n    const hasTruthyBindingValue = ![false, null, undefined, 0].includes(attrs.multiple) && !Number.isNaN(attrs.multiple);\r\n    return tag === 'select' && 'multiple' in attrs && hasTruthyBindingValue;\r\n}\r\n/**\r\n * Checks if a node should have a `:value` binding or not\r\n *\r\n * These nodes should not have a value binding\r\n * For files, because they are not reactive\r\n * For multi-selects because the value binding will reset the value\r\n */\r\nfunction shouldHaveValueBinding(tag, attrs) {\r\n    return isNativeMultiSelectNode(tag, attrs) || isFileInputNode(tag, attrs);\r\n}\r\nfunction isFormSubmitEvent(evt) {\r\n    return isEvent(evt) && evt.target && 'submit' in evt.target;\r\n}\r\nfunction isEvent(evt) {\r\n    if (!evt) {\r\n        return false;\r\n    }\r\n    if (typeof Event !== 'undefined' && isCallable(Event) && evt instanceof Event) {\r\n        return true;\r\n    }\r\n    // this is for IE and Cypress #3161\r\n    /* istanbul ignore next */\r\n    if (evt && evt.srcElement) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\nfunction isPropPresent(obj, prop) {\r\n    return prop in obj && obj[prop] !== IS_ABSENT;\r\n}\n\nfunction cleanupNonNestedPath(path) {\r\n    if (isNotNestedPath(path)) {\r\n        return path.replace(/\\[|\\]/gi, '');\r\n    }\r\n    return path;\r\n}\r\nfunction getFromPath(object, path, fallback) {\r\n    if (!object) {\r\n        return fallback;\r\n    }\r\n    if (isNotNestedPath(path)) {\r\n        return object[cleanupNonNestedPath(path)];\r\n    }\r\n    const resolvedValue = (path || '')\r\n        .split(/\\.|\\[(\\d+)\\]/)\r\n        .filter(Boolean)\r\n        .reduce((acc, propKey) => {\r\n        if (isContainerValue(acc) && propKey in acc) {\r\n            return acc[propKey];\r\n        }\r\n        return fallback;\r\n    }, object);\r\n    return resolvedValue;\r\n}\r\n/**\r\n * Sets a nested property value in a path, creates the path properties if it doesn't exist\r\n */\r\nfunction setInPath(object, path, value) {\r\n    if (isNotNestedPath(path)) {\r\n        object[cleanupNonNestedPath(path)] = value;\r\n        return;\r\n    }\r\n    const keys = path.split(/\\.|\\[(\\d+)\\]/).filter(Boolean);\r\n    let acc = object;\r\n    for (let i = 0; i < keys.length; i++) {\r\n        // Last key, set it\r\n        if (i === keys.length - 1) {\r\n            acc[keys[i]] = value;\r\n            return;\r\n        }\r\n        // Key does not exist, create a container for it\r\n        if (!(keys[i] in acc) || isNullOrUndefined(acc[keys[i]])) {\r\n            // container can be either an object or an array depending on the next key if it exists\r\n            acc[keys[i]] = isIndex(keys[i + 1]) ? [] : {};\r\n        }\r\n        acc = acc[keys[i]];\r\n    }\r\n}\r\nfunction unset(object, key) {\r\n    if (Array.isArray(object) && isIndex(key)) {\r\n        object.splice(Number(key), 1);\r\n        return;\r\n    }\r\n    if (isObject(object)) {\r\n        delete object[key];\r\n    }\r\n}\r\n/**\r\n * Removes a nested property from object\r\n */\r\nfunction unsetPath(object, path) {\r\n    if (isNotNestedPath(path)) {\r\n        delete object[cleanupNonNestedPath(path)];\r\n        return;\r\n    }\r\n    const keys = path.split(/\\.|\\[(\\d+)\\]/).filter(Boolean);\r\n    let acc = object;\r\n    for (let i = 0; i < keys.length; i++) {\r\n        // Last key, unset it\r\n        if (i === keys.length - 1) {\r\n            unset(acc, keys[i]);\r\n            break;\r\n        }\r\n        // Key does not exist, exit\r\n        if (!(keys[i] in acc) || isNullOrUndefined(acc[keys[i]])) {\r\n            break;\r\n        }\r\n        acc = acc[keys[i]];\r\n    }\r\n    const pathValues = keys.map((_, idx) => {\r\n        return getFromPath(object, keys.slice(0, idx).join('.'));\r\n    });\r\n    for (let i = pathValues.length - 1; i >= 0; i--) {\r\n        if (!isEmptyContainer(pathValues[i])) {\r\n            continue;\r\n        }\r\n        if (i === 0) {\r\n            unset(object, keys[0]);\r\n            continue;\r\n        }\r\n        unset(pathValues[i - 1], keys[i - 1]);\r\n    }\r\n}\r\n/**\r\n * A typed version of Object.keys\r\n */\r\nfunction keysOf(record) {\r\n    return Object.keys(record);\r\n}\r\n// Uses same component provide as its own injections\r\n// Due to changes in https://github.com/vuejs/vue-next/pull/2424\r\nfunction injectWithSelf(symbol, def = undefined) {\r\n    const vm = getCurrentInstance();\r\n    return (vm === null || vm === void 0 ? void 0 : vm.provides[symbol]) || inject(symbol, def);\r\n}\r\nfunction warn(message) {\r\n    warn$1(`[vee-validate]: ${message}`);\r\n}\r\n/**\r\n * Ensures we deal with a singular field value\r\n */\r\nfunction normalizeField(field) {\r\n    if (Array.isArray(field)) {\r\n        return field[0];\r\n    }\r\n    return field;\r\n}\r\nfunction resolveNextCheckboxValue(currentValue, checkedValue, uncheckedValue) {\r\n    if (Array.isArray(currentValue)) {\r\n        const newVal = [...currentValue];\r\n        const idx = newVal.indexOf(checkedValue);\r\n        idx >= 0 ? newVal.splice(idx, 1) : newVal.push(checkedValue);\r\n        return newVal;\r\n    }\r\n    return currentValue === checkedValue ? uncheckedValue : checkedValue;\r\n}\r\n/**\r\n * Creates a throttled function that only invokes the provided function (`func`) at most once per within a given number of milliseconds\r\n * (`limit`)\r\n */\r\nfunction throttle(func, limit) {\r\n    let inThrottle;\r\n    let lastResult;\r\n    return function (...args) {\r\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\r\n        const context = this;\r\n        if (!inThrottle) {\r\n            inThrottle = true;\r\n            setTimeout(() => (inThrottle = false), limit);\r\n            lastResult = func.apply(context, args);\r\n        }\r\n        return lastResult;\r\n    };\r\n}\r\nfunction debounceAsync(inner, ms = 0) {\r\n    let timer = null;\r\n    let resolves = [];\r\n    return function (...args) {\r\n        // Run the function after a certain amount of time\r\n        if (timer) {\r\n            window.clearTimeout(timer);\r\n        }\r\n        timer = window.setTimeout(() => {\r\n            // Get the result of the inner function, then apply it to the resolve function of\r\n            // each promise that has been created since the last time the inner function was run\r\n            const result = inner(...args);\r\n            resolves.forEach(r => r(result));\r\n            resolves = [];\r\n        }, ms);\r\n        return new Promise(resolve => resolves.push(resolve));\r\n    };\r\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nconst normalizeChildren = (tag, context, slotProps) => {\r\n    if (!context.slots.default) {\r\n        return context.slots.default;\r\n    }\r\n    if (typeof tag === 'string' || !tag) {\r\n        return context.slots.default(slotProps());\r\n    }\r\n    return {\r\n        default: () => { var _a, _b; return (_b = (_a = context.slots).default) === null || _b === void 0 ? void 0 : _b.call(_a, slotProps()); },\r\n    };\r\n};\r\n/**\r\n * Vue adds a `_value` prop at the moment on the input elements to store the REAL value on them, real values are different than the `value` attribute\r\n * as they do not get casted to strings unlike `el.value` which preserves user-code behavior\r\n */\r\nfunction getBoundValue(el) {\r\n    if (hasValueBinding(el)) {\r\n        return el._value;\r\n    }\r\n    return undefined;\r\n}\r\n/**\r\n * Vue adds a `_value` prop at the moment on the input elements to store the REAL value on them, real values are different than the `value` attribute\r\n * as they do not get casted to strings unlike `el.value` which preserves user-code behavior\r\n */\r\nfunction hasValueBinding(el) {\r\n    return '_value' in el;\r\n}\n\nfunction normalizeEventValue(value) {\r\n    if (!isEvent(value)) {\r\n        return value;\r\n    }\r\n    const input = value.target;\r\n    // Vue sets the current bound value on `_value` prop\r\n    // for checkboxes it it should fetch the value binding type as is (boolean instead of string)\r\n    if (hasCheckedAttr(input.type) && hasValueBinding(input)) {\r\n        return getBoundValue(input);\r\n    }\r\n    if (input.type === 'file' && input.files) {\r\n        return Array.from(input.files);\r\n    }\r\n    if (isNativeMultiSelect(input)) {\r\n        return Array.from(input.options)\r\n            .filter(opt => opt.selected && !opt.disabled)\r\n            .map(getBoundValue);\r\n    }\r\n    // makes sure we get the actual `option` bound value\r\n    // #3440\r\n    if (isNativeSelect(input)) {\r\n        const selectedOption = Array.from(input.options).find(opt => opt.selected);\r\n        return selectedOption ? getBoundValue(selectedOption) : input.value;\r\n    }\r\n    return input.value;\r\n}\n\n/**\r\n * Normalizes the given rules expression.\r\n */\r\nfunction normalizeRules(rules) {\r\n    const acc = {};\r\n    Object.defineProperty(acc, '_$$isNormalized', {\r\n        value: true,\r\n        writable: false,\r\n        enumerable: false,\r\n        configurable: false,\r\n    });\r\n    if (!rules) {\r\n        return acc;\r\n    }\r\n    // Object is already normalized, skip.\r\n    if (isObject(rules) && rules._$$isNormalized) {\r\n        return rules;\r\n    }\r\n    if (isObject(rules)) {\r\n        return Object.keys(rules).reduce((prev, curr) => {\r\n            const params = normalizeParams(rules[curr]);\r\n            if (rules[curr] !== false) {\r\n                prev[curr] = buildParams(params);\r\n            }\r\n            return prev;\r\n        }, acc);\r\n    }\r\n    /* istanbul ignore if */\r\n    if (typeof rules !== 'string') {\r\n        return acc;\r\n    }\r\n    return rules.split('|').reduce((prev, rule) => {\r\n        const parsedRule = parseRule(rule);\r\n        if (!parsedRule.name) {\r\n            return prev;\r\n        }\r\n        prev[parsedRule.name] = buildParams(parsedRule.params);\r\n        return prev;\r\n    }, acc);\r\n}\r\n/**\r\n * Normalizes a rule param.\r\n */\r\nfunction normalizeParams(params) {\r\n    if (params === true) {\r\n        return [];\r\n    }\r\n    if (Array.isArray(params)) {\r\n        return params;\r\n    }\r\n    if (isObject(params)) {\r\n        return params;\r\n    }\r\n    return [params];\r\n}\r\nfunction buildParams(provided) {\r\n    const mapValueToLocator = (value) => {\r\n        // A target param using interpolation\r\n        if (typeof value === 'string' && value[0] === '@') {\r\n            return createLocator(value.slice(1));\r\n        }\r\n        return value;\r\n    };\r\n    if (Array.isArray(provided)) {\r\n        return provided.map(mapValueToLocator);\r\n    }\r\n    // #3073\r\n    if (provided instanceof RegExp) {\r\n        return [provided];\r\n    }\r\n    return Object.keys(provided).reduce((prev, key) => {\r\n        prev[key] = mapValueToLocator(provided[key]);\r\n        return prev;\r\n    }, {});\r\n}\r\n/**\r\n * Parses a rule string expression.\r\n */\r\nconst parseRule = (rule) => {\r\n    let params = [];\r\n    const name = rule.split(':')[0];\r\n    if (rule.includes(':')) {\r\n        params = rule.split(':').slice(1).join(':').split(',');\r\n    }\r\n    return { name, params };\r\n};\r\nfunction createLocator(value) {\r\n    const locator = (crossTable) => {\r\n        const val = getFromPath(crossTable, value) || crossTable[value];\r\n        return val;\r\n    };\r\n    locator.__locatorRef = value;\r\n    return locator;\r\n}\r\nfunction extractLocators(params) {\r\n    if (Array.isArray(params)) {\r\n        return params.filter(isLocator);\r\n    }\r\n    return keysOf(params)\r\n        .filter(key => isLocator(params[key]))\r\n        .map(key => params[key]);\r\n}\n\nconst DEFAULT_CONFIG = {\r\n    generateMessage: ({ field }) => `${field} is not valid.`,\r\n    bails: true,\r\n    validateOnBlur: true,\r\n    validateOnChange: true,\r\n    validateOnInput: false,\r\n    validateOnModelUpdate: true,\r\n};\r\nlet currentConfig = Object.assign({}, DEFAULT_CONFIG);\r\nconst getConfig = () => currentConfig;\r\nconst setConfig = (newConf) => {\r\n    currentConfig = Object.assign(Object.assign({}, currentConfig), newConf);\r\n};\r\nconst configure = setConfig;\n\n/**\r\n * Validates a value against the rules.\r\n */\r\nasync function validate(value, rules, options = {}) {\r\n    const shouldBail = options === null || options === void 0 ? void 0 : options.bails;\r\n    const field = {\r\n        name: (options === null || options === void 0 ? void 0 : options.name) || '{field}',\r\n        rules,\r\n        bails: shouldBail !== null && shouldBail !== void 0 ? shouldBail : true,\r\n        formData: (options === null || options === void 0 ? void 0 : options.values) || {},\r\n    };\r\n    const result = await _validate(field, value);\r\n    const errors = result.errors;\r\n    return {\r\n        errors,\r\n        valid: !errors.length,\r\n    };\r\n}\r\n/**\r\n * Starts the validation process.\r\n */\r\nasync function _validate(field, value) {\r\n    if (isYupValidator(field.rules)) {\r\n        return validateFieldWithYup(value, field.rules, { bails: field.bails });\r\n    }\r\n    // if a generic function, use it as the pipeline.\r\n    if (isCallable(field.rules)) {\r\n        const ctx = {\r\n            field: field.name,\r\n            form: field.formData,\r\n            value: value,\r\n        };\r\n        const result = await field.rules(value, ctx);\r\n        const isValid = typeof result !== 'string' && result;\r\n        const message = typeof result === 'string' ? result : _generateFieldError(ctx);\r\n        return {\r\n            errors: !isValid ? [message] : [],\r\n        };\r\n    }\r\n    const normalizedContext = Object.assign(Object.assign({}, field), { rules: normalizeRules(field.rules) });\r\n    const errors = [];\r\n    const rulesKeys = Object.keys(normalizedContext.rules);\r\n    const length = rulesKeys.length;\r\n    for (let i = 0; i < length; i++) {\r\n        const rule = rulesKeys[i];\r\n        const result = await _test(normalizedContext, value, {\r\n            name: rule,\r\n            params: normalizedContext.rules[rule],\r\n        });\r\n        if (result.error) {\r\n            errors.push(result.error);\r\n            if (field.bails) {\r\n                return {\r\n                    errors,\r\n                };\r\n            }\r\n        }\r\n    }\r\n    return {\r\n        errors,\r\n    };\r\n}\r\n/**\r\n * Handles yup validation\r\n */\r\nasync function validateFieldWithYup(value, validator, opts) {\r\n    var _a;\r\n    const errors = await validator\r\n        .validate(value, {\r\n        abortEarly: (_a = opts.bails) !== null && _a !== void 0 ? _a : true,\r\n    })\r\n        .then(() => [])\r\n        .catch((err) => {\r\n        // Yup errors have a name prop one them.\r\n        // https://github.com/jquense/yup#validationerrorerrors-string--arraystring-value-any-path-string\r\n        if (err.name === 'ValidationError') {\r\n            return err.errors;\r\n        }\r\n        // re-throw the error so we don't hide it\r\n        throw err;\r\n    });\r\n    return {\r\n        errors,\r\n    };\r\n}\r\n/**\r\n * Tests a single input value against a rule.\r\n */\r\nasync function _test(field, value, rule) {\r\n    const validator = resolveRule(rule.name);\r\n    if (!validator) {\r\n        throw new Error(`No such validator '${rule.name}' exists.`);\r\n    }\r\n    const params = fillTargetValues(rule.params, field.formData);\r\n    const ctx = {\r\n        field: field.name,\r\n        value,\r\n        form: field.formData,\r\n        rule: Object.assign(Object.assign({}, rule), { params }),\r\n    };\r\n    const result = await validator(value, params, ctx);\r\n    if (typeof result === 'string') {\r\n        return {\r\n            error: result,\r\n        };\r\n    }\r\n    return {\r\n        error: result ? undefined : _generateFieldError(ctx),\r\n    };\r\n}\r\n/**\r\n * Generates error messages.\r\n */\r\nfunction _generateFieldError(fieldCtx) {\r\n    const message = getConfig().generateMessage;\r\n    if (!message) {\r\n        return 'Field is invalid';\r\n    }\r\n    return message(fieldCtx);\r\n}\r\nfunction fillTargetValues(params, crossTable) {\r\n    const normalize = (value) => {\r\n        if (isLocator(value)) {\r\n            return value(crossTable);\r\n        }\r\n        return value;\r\n    };\r\n    if (Array.isArray(params)) {\r\n        return params.map(normalize);\r\n    }\r\n    return Object.keys(params).reduce((acc, param) => {\r\n        acc[param] = normalize(params[param]);\r\n        return acc;\r\n    }, {});\r\n}\r\nasync function validateYupSchema(schema, values) {\r\n    const errorObjects = await schema\r\n        .validate(values, { abortEarly: false })\r\n        .then(() => [])\r\n        .catch((err) => {\r\n        // Yup errors have a name prop one them.\r\n        // https://github.com/jquense/yup#validationerrorerrors-string--arraystring-value-any-path-string\r\n        if (err.name !== 'ValidationError') {\r\n            throw err;\r\n        }\r\n        // list of aggregated errors\r\n        return err.inner || [];\r\n    });\r\n    const results = {};\r\n    const errors = {};\r\n    for (const error of errorObjects) {\r\n        const messages = error.errors;\r\n        results[error.path] = { valid: !messages.length, errors: messages };\r\n        if (messages.length) {\r\n            errors[error.path] = messages[0];\r\n        }\r\n    }\r\n    return {\r\n        valid: !errorObjects.length,\r\n        results,\r\n        errors,\r\n    };\r\n}\r\nasync function validateObjectSchema(schema, values, opts) {\r\n    const paths = keysOf(schema);\r\n    const validations = paths.map(async (path) => {\r\n        var _a, _b, _c;\r\n        const fieldResult = await validate(getFromPath(values, path), schema[path], {\r\n            name: ((_a = opts === null || opts === void 0 ? void 0 : opts.names) === null || _a === void 0 ? void 0 : _a[path]) || path,\r\n            values: values,\r\n            bails: (_c = (_b = opts === null || opts === void 0 ? void 0 : opts.bailsMap) === null || _b === void 0 ? void 0 : _b[path]) !== null && _c !== void 0 ? _c : true,\r\n        });\r\n        return Object.assign(Object.assign({}, fieldResult), { path });\r\n    });\r\n    let isAllValid = true;\r\n    const validationResults = await Promise.all(validations);\r\n    const results = {};\r\n    const errors = {};\r\n    for (const result of validationResults) {\r\n        results[result.path] = {\r\n            valid: result.valid,\r\n            errors: result.errors,\r\n        };\r\n        if (!result.valid) {\r\n            isAllValid = false;\r\n            errors[result.path] = result.errors[0];\r\n        }\r\n    }\r\n    return {\r\n        valid: isAllValid,\r\n        results,\r\n        errors,\r\n    };\r\n}\n\nfunction set(obj, key, val) {\n\tif (typeof val.value === 'object') val.value = klona(val.value);\n\tif (!val.enumerable || val.get || val.set || !val.configurable || !val.writable || key === '__proto__') {\n\t\tObject.defineProperty(obj, key, val);\n\t} else obj[key] = val.value;\n}\n\nfunction klona(x) {\n\tif (typeof x !== 'object') return x;\n\n\tvar i=0, k, list, tmp, str=Object.prototype.toString.call(x);\n\n\tif (str === '[object Object]') {\n\t\ttmp = Object.create(x.__proto__ || null);\n\t} else if (str === '[object Array]') {\n\t\ttmp = Array(x.length);\n\t} else if (str === '[object Set]') {\n\t\ttmp = new Set;\n\t\tx.forEach(function (val) {\n\t\t\ttmp.add(klona(val));\n\t\t});\n\t} else if (str === '[object Map]') {\n\t\ttmp = new Map;\n\t\tx.forEach(function (val, key) {\n\t\t\ttmp.set(klona(key), klona(val));\n\t\t});\n\t} else if (str === '[object Date]') {\n\t\ttmp = new Date(+x);\n\t} else if (str === '[object RegExp]') {\n\t\ttmp = new RegExp(x.source, x.flags);\n\t} else if (str === '[object DataView]') {\n\t\ttmp = new x.constructor( klona(x.buffer) );\n\t} else if (str === '[object ArrayBuffer]') {\n\t\ttmp = x.slice(0);\n\t} else if (str.slice(-6) === 'Array]') {\n\t\t// ArrayBuffer.isView(x)\n\t\t// ~> `new` bcuz `Buffer.slice` => ref\n\t\ttmp = new x.constructor(x);\n\t}\n\n\tif (tmp) {\n\t\tfor (list=Object.getOwnPropertySymbols(x); i < list.length; i++) {\n\t\t\tset(tmp, list[i], Object.getOwnPropertyDescriptor(x, list[i]));\n\t\t}\n\n\t\tfor (i=0, list=Object.getOwnPropertyNames(x); i < list.length; i++) {\n\t\t\tif (Object.hasOwnProperty.call(tmp, k=list[i]) && tmp[k] === x[k]) continue;\n\t\t\tset(tmp, k, Object.getOwnPropertyDescriptor(x, k));\n\t\t}\n\t}\n\n\treturn tmp || x;\n}\n\nvar es6 = function equal(a, b) {\n  if (a === b) return true;\n\n  if (a && b && typeof a == 'object' && typeof b == 'object') {\n    if (a.constructor !== b.constructor) return false;\n\n    var length, i, keys;\n    if (Array.isArray(a)) {\n      length = a.length;\n      if (length != b.length) return false;\n      for (i = length; i-- !== 0;)\n        if (!equal(a[i], b[i])) return false;\n      return true;\n    }\n\n\n    if ((a instanceof Map) && (b instanceof Map)) {\n      if (a.size !== b.size) return false;\n      for (i of a.entries())\n        if (!b.has(i[0])) return false;\n      for (i of a.entries())\n        if (!equal(i[1], b.get(i[0]))) return false;\n      return true;\n    }\n\n    if ((a instanceof Set) && (b instanceof Set)) {\n      if (a.size !== b.size) return false;\n      for (i of a.entries())\n        if (!b.has(i[0])) return false;\n      return true;\n    }\n\n    if (ArrayBuffer.isView(a) && ArrayBuffer.isView(b)) {\n      length = a.length;\n      if (length != b.length) return false;\n      for (i = length; i-- !== 0;)\n        if (a[i] !== b[i]) return false;\n      return true;\n    }\n\n\n    if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;\n    if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();\n    if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();\n\n    keys = Object.keys(a);\n    length = keys.length;\n    if (length !== Object.keys(b).length) return false;\n\n    for (i = length; i-- !== 0;)\n      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;\n\n    for (i = length; i-- !== 0;) {\n      var key = keys[i];\n\n      if (!equal(a[key], b[key])) return false;\n    }\n\n    return true;\n  }\n\n  // true if both NaN, false otherwise\n  return a!==a && b!==b;\n};\n\nlet ID_COUNTER = 0;\r\nfunction useFieldState(path, init) {\r\n    const { value, initialValue, setInitialValue } = _useFieldValue(path, init.modelValue, !init.standalone);\r\n    const { errorMessage, errors, setErrors } = _useFieldErrors(path, !init.standalone);\r\n    const meta = _useFieldMeta(value, initialValue, errors);\r\n    const id = ID_COUNTER >= Number.MAX_SAFE_INTEGER ? 0 : ++ID_COUNTER;\r\n    function setState(state) {\r\n        var _a;\r\n        if ('value' in state) {\r\n            value.value = state.value;\r\n        }\r\n        if ('errors' in state) {\r\n            setErrors(state.errors);\r\n        }\r\n        if ('touched' in state) {\r\n            meta.touched = (_a = state.touched) !== null && _a !== void 0 ? _a : meta.touched;\r\n        }\r\n        if ('initialValue' in state) {\r\n            setInitialValue(state.initialValue);\r\n        }\r\n    }\r\n    return {\r\n        id,\r\n        path,\r\n        value,\r\n        initialValue,\r\n        meta,\r\n        errors,\r\n        errorMessage,\r\n        setState,\r\n    };\r\n}\r\n/**\r\n * Creates the field value and resolves the initial value\r\n */\r\nfunction _useFieldValue(path, modelValue, shouldInjectForm) {\r\n    const form = shouldInjectForm ? injectWithSelf(FormContextKey, undefined) : undefined;\r\n    const modelRef = ref(unref(modelValue));\r\n    function resolveInitialValue() {\r\n        if (!form) {\r\n            return unref(modelRef);\r\n        }\r\n        return getFromPath(form.meta.value.initialValues, unref(path), unref(modelRef));\r\n    }\r\n    function setInitialValue(value) {\r\n        if (!form) {\r\n            modelRef.value = value;\r\n            return;\r\n        }\r\n        form.setFieldInitialValue(unref(path), value);\r\n    }\r\n    const initialValue = computed(resolveInitialValue);\r\n    // if no form is associated, use a regular ref.\r\n    if (!form) {\r\n        const value = ref(resolveInitialValue());\r\n        return {\r\n            value,\r\n            initialValue,\r\n            setInitialValue,\r\n        };\r\n    }\r\n    // to set the initial value, first check if there is a current value, if there is then use it.\r\n    // otherwise use the configured initial value if it exists.\r\n    // prioritize model value over form values\r\n    // #3429\r\n    const currentValue = modelValue ? unref(modelValue) : getFromPath(form.values, unref(path), unref(initialValue));\r\n    form.stageInitialValue(unref(path), currentValue);\r\n    // otherwise use a computed setter that triggers the `setFieldValue`\r\n    const value = computed({\r\n        get() {\r\n            return getFromPath(form.values, unref(path));\r\n        },\r\n        set(newVal) {\r\n            form.setFieldValue(unref(path), newVal);\r\n        },\r\n    });\r\n    return {\r\n        value,\r\n        initialValue,\r\n        setInitialValue,\r\n    };\r\n}\r\n/**\r\n * Creates meta flags state and some associated effects with them\r\n */\r\nfunction _useFieldMeta(currentValue, initialValue, errors) {\r\n    const meta = reactive({\r\n        touched: false,\r\n        pending: false,\r\n        valid: true,\r\n        validated: !!unref(errors).length,\r\n        initialValue: computed(() => unref(initialValue)),\r\n        dirty: computed(() => {\r\n            return !es6(unref(currentValue), unref(initialValue));\r\n        }),\r\n    });\r\n    watch(errors, value => {\r\n        meta.valid = !value.length;\r\n    }, {\r\n        immediate: true,\r\n        flush: 'sync',\r\n    });\r\n    return meta;\r\n}\r\n/**\r\n * Creates the error message state for the field state\r\n */\r\nfunction _useFieldErrors(path, shouldInjectForm) {\r\n    const form = shouldInjectForm ? injectWithSelf(FormContextKey, undefined) : undefined;\r\n    function normalizeErrors(messages) {\r\n        if (!messages) {\r\n            return [];\r\n        }\r\n        return Array.isArray(messages) ? messages : [messages];\r\n    }\r\n    if (!form) {\r\n        const errors = ref([]);\r\n        return {\r\n            errors,\r\n            errorMessage: computed(() => errors.value[0]),\r\n            setErrors: (messages) => {\r\n                errors.value = normalizeErrors(messages);\r\n            },\r\n        };\r\n    }\r\n    const errors = computed(() => form.errorBag.value[unref(path)] || []);\r\n    return {\r\n        errors,\r\n        errorMessage: computed(() => errors.value[0]),\r\n        setErrors: (messages) => {\r\n            form.setFieldErrorBag(unref(path), normalizeErrors(messages));\r\n        },\r\n    };\r\n}\n\nfunction installDevtoolsPlugin(app) {\r\n    if ((process.env.NODE_ENV !== 'production')) {\r\n        setupDevtoolsPlugin({\r\n            id: 'vee-validate-devtools-plugin',\r\n            label: 'VeeValidate Plugin',\r\n            packageName: 'vee-validate',\r\n            homepage: 'https://vee-validate.logaretm.com/v4',\r\n            app,\r\n            logo: 'https://vee-validate.logaretm.com/v4/logo.png',\r\n        }, setupApiHooks);\r\n    }\r\n}\r\nconst DEVTOOLS_FORMS = {};\r\nconst DEVTOOLS_FIELDS = {};\r\nlet API;\r\nconst refreshInspector = throttle(() => {\r\n    setTimeout(async () => {\r\n        await nextTick();\r\n        API === null || API === void 0 ? void 0 : API.sendInspectorState(INSPECTOR_ID);\r\n        API === null || API === void 0 ? void 0 : API.sendInspectorTree(INSPECTOR_ID);\r\n    }, 100);\r\n}, 100);\r\nfunction registerFormWithDevTools(form) {\r\n    const vm = getCurrentInstance();\r\n    if (!API) {\r\n        const app = vm === null || vm === void 0 ? void 0 : vm.appContext.app;\r\n        if (!app) {\r\n            return;\r\n        }\r\n        installDevtoolsPlugin(app);\r\n    }\r\n    DEVTOOLS_FORMS[form.formId] = Object.assign({}, form);\r\n    DEVTOOLS_FORMS[form.formId]._vm = vm;\r\n    onUnmounted(() => {\r\n        delete DEVTOOLS_FORMS[form.formId];\r\n        refreshInspector();\r\n    });\r\n    refreshInspector();\r\n}\r\nfunction registerSingleFieldWithDevtools(field) {\r\n    const vm = getCurrentInstance();\r\n    if (!API) {\r\n        const app = vm === null || vm === void 0 ? void 0 : vm.appContext.app;\r\n        if (!app) {\r\n            return;\r\n        }\r\n        installDevtoolsPlugin(app);\r\n    }\r\n    DEVTOOLS_FIELDS[field.id] = Object.assign({}, field);\r\n    DEVTOOLS_FIELDS[field.id]._vm = vm;\r\n    onUnmounted(() => {\r\n        delete DEVTOOLS_FIELDS[field.id];\r\n        refreshInspector();\r\n    });\r\n    refreshInspector();\r\n}\r\nconst INSPECTOR_ID = 'vee-validate-inspector';\r\nconst COLORS = {\r\n    error: 0xbd4b4b,\r\n    success: 0x06d77b,\r\n    unknown: 0x54436b,\r\n    white: 0xffffff,\r\n    black: 0x000000,\r\n    blue: 0x035397,\r\n    purple: 0xb980f0,\r\n    orange: 0xf5a962,\r\n    gray: 0xbbbfca,\r\n};\r\nlet SELECTED_NODE = null;\r\nfunction setupApiHooks(api) {\r\n    API = api;\r\n    api.addInspector({\r\n        id: INSPECTOR_ID,\r\n        icon: 'rule',\r\n        label: 'vee-validate',\r\n        noSelectionText: 'Select a vee-validate node to inspect',\r\n        actions: [\r\n            {\r\n                icon: 'done_outline',\r\n                tooltip: 'Validate selected item',\r\n                action: async () => {\r\n                    if (!SELECTED_NODE) {\r\n                        console.error('There is not a valid selected vee-validate node or component');\r\n                        return;\r\n                    }\r\n                    const result = await SELECTED_NODE.validate();\r\n                    console.log(result);\r\n                },\r\n            },\r\n            {\r\n                icon: 'delete_sweep',\r\n                tooltip: 'Clear validation state of the selected item',\r\n                action: () => {\r\n                    if (!SELECTED_NODE) {\r\n                        console.error('There is not a valid selected vee-validate node or component');\r\n                        return;\r\n                    }\r\n                    if ('id' in SELECTED_NODE) {\r\n                        SELECTED_NODE.resetField();\r\n                        return;\r\n                    }\r\n                    SELECTED_NODE.resetForm();\r\n                },\r\n            },\r\n        ],\r\n    });\r\n    api.on.getInspectorTree(payload => {\r\n        if (payload.inspectorId !== INSPECTOR_ID) {\r\n            return;\r\n        }\r\n        const forms = Object.values(DEVTOOLS_FORMS);\r\n        const fields = Object.values(DEVTOOLS_FIELDS);\r\n        payload.rootNodes = [\r\n            ...forms.map(mapFormForDevtoolsInspector),\r\n            ...fields.map(field => mapFieldForDevtoolsInspector(field)),\r\n        ];\r\n    });\r\n    api.on.getInspectorState((payload, ctx) => {\r\n        if (payload.inspectorId !== INSPECTOR_ID || ctx.currentTab !== `custom-inspector:${INSPECTOR_ID}`) {\r\n            return;\r\n        }\r\n        const { form, field, type } = decodeNodeId(payload.nodeId);\r\n        if (form && type === 'form') {\r\n            payload.state = buildFormState(form);\r\n            SELECTED_NODE = form;\r\n            return;\r\n        }\r\n        if (field && type === 'field') {\r\n            payload.state = buildFieldState(field);\r\n            SELECTED_NODE = field;\r\n            return;\r\n        }\r\n        SELECTED_NODE = null;\r\n    });\r\n}\r\nfunction mapFormForDevtoolsInspector(form) {\r\n    const { textColor, bgColor } = getTagTheme(form);\r\n    const formTreeNodes = {};\r\n    Object.values(form.fieldsByPath.value).forEach(field => {\r\n        const fieldInstance = Array.isArray(field) ? field[0] : field;\r\n        if (!fieldInstance) {\r\n            return;\r\n        }\r\n        setInPath(formTreeNodes, unref(fieldInstance.name), mapFieldForDevtoolsInspector(fieldInstance, form));\r\n    });\r\n    function buildFormTree(tree, path = []) {\r\n        const key = [...path].pop();\r\n        if ('id' in tree) {\r\n            return Object.assign(Object.assign({}, tree), { label: key || tree.label });\r\n        }\r\n        if (isObject(tree)) {\r\n            return {\r\n                id: `${path.join('.')}`,\r\n                label: key || '',\r\n                children: Object.keys(tree).map(key => buildFormTree(tree[key], [...path, key])),\r\n            };\r\n        }\r\n        if (Array.isArray(tree)) {\r\n            return {\r\n                id: `${path.join('.')}`,\r\n                label: `${key}[]`,\r\n                children: tree.map((c, idx) => buildFormTree(c, [...path, String(idx)])),\r\n            };\r\n        }\r\n        return { id: '', label: '', children: [] };\r\n    }\r\n    const { children } = buildFormTree(formTreeNodes);\r\n    return {\r\n        id: encodeNodeId(form),\r\n        label: 'Form',\r\n        children,\r\n        tags: [\r\n            {\r\n                label: 'Form',\r\n                textColor,\r\n                backgroundColor: bgColor,\r\n            },\r\n            {\r\n                label: `${Object.keys(form.fieldsByPath.value).length} fields`,\r\n                textColor: COLORS.white,\r\n                backgroundColor: COLORS.unknown,\r\n            },\r\n        ],\r\n    };\r\n}\r\nfunction mapFieldForDevtoolsInspector(field, form) {\r\n    const fieldInstance = normalizeField(field);\r\n    const { textColor, bgColor } = getTagTheme(fieldInstance);\r\n    const isGroup = Array.isArray(field) && field.length > 1;\r\n    return {\r\n        id: encodeNodeId(form, fieldInstance, !isGroup),\r\n        label: unref(fieldInstance.name),\r\n        children: Array.isArray(field) ? field.map(fieldItem => mapFieldForDevtoolsInspector(fieldItem, form)) : undefined,\r\n        tags: [\r\n            isGroup\r\n                ? undefined\r\n                : {\r\n                    label: 'Field',\r\n                    textColor,\r\n                    backgroundColor: bgColor,\r\n                },\r\n            !form\r\n                ? {\r\n                    label: 'Standalone',\r\n                    textColor: COLORS.black,\r\n                    backgroundColor: COLORS.gray,\r\n                }\r\n                : undefined,\r\n            !isGroup && fieldInstance.type === 'checkbox'\r\n                ? {\r\n                    label: 'Checkbox',\r\n                    textColor: COLORS.white,\r\n                    backgroundColor: COLORS.blue,\r\n                }\r\n                : undefined,\r\n            !isGroup && fieldInstance.type === 'radio'\r\n                ? {\r\n                    label: 'Radio',\r\n                    textColor: COLORS.white,\r\n                    backgroundColor: COLORS.purple,\r\n                }\r\n                : undefined,\r\n            isGroup\r\n                ? {\r\n                    label: 'Group',\r\n                    textColor: COLORS.black,\r\n                    backgroundColor: COLORS.orange,\r\n                }\r\n                : undefined,\r\n        ].filter(Boolean),\r\n    };\r\n}\r\nfunction encodeNodeId(form, field, encodeIndex = true) {\r\n    const fieldPath = form ? unref(field === null || field === void 0 ? void 0 : field.name) : field === null || field === void 0 ? void 0 : field.id;\r\n    const fieldGroup = fieldPath ? form === null || form === void 0 ? void 0 : form.fieldsByPath.value[fieldPath] : undefined;\r\n    let idx;\r\n    if (encodeIndex && field && Array.isArray(fieldGroup)) {\r\n        idx = fieldGroup.indexOf(field);\r\n    }\r\n    const idObject = { f: form === null || form === void 0 ? void 0 : form.formId, ff: fieldPath, idx, type: field ? 'field' : 'form' };\r\n    return btoa(JSON.stringify(idObject));\r\n}\r\nfunction decodeNodeId(nodeId) {\r\n    try {\r\n        const idObject = JSON.parse(atob(nodeId));\r\n        const form = DEVTOOLS_FORMS[idObject.f];\r\n        if (!form && idObject.ff) {\r\n            const field = DEVTOOLS_FIELDS[idObject.ff];\r\n            if (!field) {\r\n                return {};\r\n            }\r\n            return {\r\n                type: idObject.type,\r\n                field,\r\n            };\r\n        }\r\n        if (!form) {\r\n            return {};\r\n        }\r\n        const fieldGroup = form.fieldsByPath.value[idObject.ff];\r\n        return {\r\n            type: idObject.type,\r\n            form,\r\n            field: Array.isArray(fieldGroup) ? fieldGroup[idObject.idx || 0] : fieldGroup,\r\n        };\r\n    }\r\n    catch (err) {\r\n        // console.error(`Devtools: [vee-validate] Failed to parse node id ${nodeId}`);\r\n    }\r\n    return {};\r\n}\r\nfunction buildFieldState(field) {\r\n    const { errors, meta, value } = field;\r\n    return {\r\n        'Field state': [\r\n            { key: 'errors', value: errors.value },\r\n            {\r\n                key: 'initialValue',\r\n                value: meta.initialValue,\r\n            },\r\n            {\r\n                key: 'currentValue',\r\n                value: value.value,\r\n            },\r\n            {\r\n                key: 'touched',\r\n                value: meta.touched,\r\n            },\r\n            {\r\n                key: 'dirty',\r\n                value: meta.dirty,\r\n            },\r\n            {\r\n                key: 'valid',\r\n                value: meta.valid,\r\n            },\r\n        ],\r\n    };\r\n}\r\nfunction buildFormState(form) {\r\n    const { errorBag, meta, values, isSubmitting, submitCount } = form;\r\n    return {\r\n        'Form state': [\r\n            {\r\n                key: 'submitCount',\r\n                value: submitCount.value,\r\n            },\r\n            {\r\n                key: 'isSubmitting',\r\n                value: isSubmitting.value,\r\n            },\r\n            {\r\n                key: 'touched',\r\n                value: meta.value.touched,\r\n            },\r\n            {\r\n                key: 'dirty',\r\n                value: meta.value.dirty,\r\n            },\r\n            {\r\n                key: 'valid',\r\n                value: meta.value.valid,\r\n            },\r\n            {\r\n                key: 'initialValues',\r\n                value: meta.value.initialValues,\r\n            },\r\n            {\r\n                key: 'currentValues',\r\n                value: values,\r\n            },\r\n            {\r\n                key: 'errors',\r\n                value: keysOf(errorBag.value).reduce((acc, key) => {\r\n                    var _a;\r\n                    const message = (_a = errorBag.value[key]) === null || _a === void 0 ? void 0 : _a[0];\r\n                    if (message) {\r\n                        acc[key] = message;\r\n                    }\r\n                    return acc;\r\n                }, {}),\r\n            },\r\n        ],\r\n    };\r\n}\r\n/**\r\n * Resolves the tag color based on the form state\r\n */\r\nfunction getTagTheme(fieldOrForm) {\r\n    // const fallbackColors = {\r\n    //   bgColor: COLORS.unknown,\r\n    //   textColor: COLORS.white,\r\n    // };\r\n    const isValid = 'id' in fieldOrForm ? fieldOrForm.meta.valid : fieldOrForm.meta.value.valid;\r\n    return {\r\n        bgColor: isValid ? COLORS.success : COLORS.error,\r\n        textColor: isValid ? COLORS.black : COLORS.white,\r\n    };\r\n}\n\n/**\r\n * Creates a field composite.\r\n */\r\nfunction useField(name, rules, opts) {\r\n    if (hasCheckedAttr(opts === null || opts === void 0 ? void 0 : opts.type)) {\r\n        return useCheckboxField(name, rules, opts);\r\n    }\r\n    return _useField(name, rules, opts);\r\n}\r\nfunction _useField(name, rules, opts) {\r\n    const { initialValue: modelValue, validateOnMount, bails, type, checkedValue, label, validateOnValueUpdate, uncheckedValue, standalone, } = normalizeOptions(unref(name), opts);\r\n    const form = !standalone ? injectWithSelf(FormContextKey) : undefined;\r\n    const { id, value, initialValue, meta, setState, errors, errorMessage } = useFieldState(name, {\r\n        modelValue,\r\n        standalone,\r\n    });\r\n    /**\r\n     * Handles common onBlur meta update\r\n     */\r\n    const handleBlur = () => {\r\n        meta.touched = true;\r\n    };\r\n    const normalizedRules = computed(() => {\r\n        let rulesValue = unref(rules);\r\n        const schema = unref(form === null || form === void 0 ? void 0 : form.schema);\r\n        if (schema && !isYupValidator(schema)) {\r\n            rulesValue = extractRuleFromSchema(schema, unref(name)) || rulesValue;\r\n        }\r\n        if (isYupValidator(rulesValue) || isCallable(rulesValue)) {\r\n            return rulesValue;\r\n        }\r\n        return normalizeRules(rulesValue);\r\n    });\r\n    async function validateCurrentValue(mode) {\r\n        var _a, _b;\r\n        if (form === null || form === void 0 ? void 0 : form.validateSchema) {\r\n            return (_a = (await form.validateSchema(mode)).results[unref(name)]) !== null && _a !== void 0 ? _a : { valid: true, errors: [] };\r\n        }\r\n        return validate(value.value, normalizedRules.value, {\r\n            name: unref(label) || unref(name),\r\n            values: (_b = form === null || form === void 0 ? void 0 : form.values) !== null && _b !== void 0 ? _b : {},\r\n            bails,\r\n        });\r\n    }\r\n    async function validateWithStateMutation() {\r\n        meta.pending = true;\r\n        meta.validated = true;\r\n        const result = await validateCurrentValue('validated-only');\r\n        setState({ errors: result.errors });\r\n        meta.pending = false;\r\n        return result;\r\n    }\r\n    async function validateValidStateOnly() {\r\n        const result = await validateCurrentValue('silent');\r\n        meta.valid = result.valid;\r\n        return result;\r\n    }\r\n    function validate$1(opts) {\r\n        if (!(opts === null || opts === void 0 ? void 0 : opts.mode) || (opts === null || opts === void 0 ? void 0 : opts.mode) === 'force') {\r\n            return validateWithStateMutation();\r\n        }\r\n        if ((opts === null || opts === void 0 ? void 0 : opts.mode) === 'validated-only') {\r\n            return validateWithStateMutation();\r\n        }\r\n        return validateValidStateOnly();\r\n    }\r\n    // Common input/change event handler\r\n    const handleChange = (e, shouldValidate = true) => {\r\n        const newValue = normalizeEventValue(e);\r\n        value.value = newValue;\r\n        if (!validateOnValueUpdate && shouldValidate) {\r\n            validateWithStateMutation();\r\n        }\r\n    };\r\n    // Runs the initial validation\r\n    onMounted(() => {\r\n        if (validateOnMount) {\r\n            return validateWithStateMutation();\r\n        }\r\n        // validate self initially if no form was handling this\r\n        // forms should have their own initial silent validation run to make things more efficient\r\n        if (!form || !form.validateSchema) {\r\n            validateValidStateOnly();\r\n        }\r\n    });\r\n    function setTouched(isTouched) {\r\n        meta.touched = isTouched;\r\n    }\r\n    let unwatchValue;\r\n    function watchValue() {\r\n        unwatchValue = watch(value, validateOnValueUpdate ? validateWithStateMutation : validateValidStateOnly, {\r\n            deep: true,\r\n        });\r\n    }\r\n    watchValue();\r\n    function resetField(state) {\r\n        var _a;\r\n        unwatchValue === null || unwatchValue === void 0 ? void 0 : unwatchValue();\r\n        const newValue = state && 'value' in state ? state.value : initialValue.value;\r\n        setState({\r\n            value: klona(newValue),\r\n            initialValue: klona(newValue),\r\n            touched: (_a = state === null || state === void 0 ? void 0 : state.touched) !== null && _a !== void 0 ? _a : false,\r\n            errors: (state === null || state === void 0 ? void 0 : state.errors) || [],\r\n        });\r\n        meta.pending = false;\r\n        meta.validated = false;\r\n        validateValidStateOnly();\r\n        // need to watch at next tick to avoid triggering the value watcher\r\n        nextTick(() => {\r\n            watchValue();\r\n        });\r\n    }\r\n    function setValue(newValue) {\r\n        value.value = newValue;\r\n    }\r\n    function setErrors(errors) {\r\n        setState({ errors: Array.isArray(errors) ? errors : [errors] });\r\n    }\r\n    const field = {\r\n        id,\r\n        name,\r\n        label,\r\n        value,\r\n        meta,\r\n        errors,\r\n        errorMessage,\r\n        type,\r\n        checkedValue,\r\n        uncheckedValue,\r\n        bails,\r\n        resetField,\r\n        handleReset: () => resetField(),\r\n        validate: validate$1,\r\n        handleChange,\r\n        handleBlur,\r\n        setState,\r\n        setTouched,\r\n        setErrors,\r\n        setValue,\r\n    };\r\n    provide(FieldContextKey, field);\r\n    if (isRef(rules) && typeof unref(rules) !== 'function') {\r\n        watch(rules, (value, oldValue) => {\r\n            if (es6(value, oldValue)) {\r\n                return;\r\n            }\r\n            meta.validated ? validateWithStateMutation() : validateValidStateOnly();\r\n        }, {\r\n            deep: true,\r\n        });\r\n    }\r\n    if ((process.env.NODE_ENV !== 'production')) {\r\n        field._vm = getCurrentInstance();\r\n        watch(() => (Object.assign(Object.assign({ errors: errors.value }, meta), { value: value.value })), refreshInspector, {\r\n            deep: true,\r\n        });\r\n        if (!form) {\r\n            registerSingleFieldWithDevtools(field);\r\n        }\r\n    }\r\n    // if no associated form return the field API immediately\r\n    if (!form) {\r\n        return field;\r\n    }\r\n    // associate the field with the given form\r\n    form.register(field);\r\n    onBeforeUnmount(() => {\r\n        form.unregister(field);\r\n    });\r\n    // extract cross-field dependencies in a computed prop\r\n    const dependencies = computed(() => {\r\n        const rulesVal = normalizedRules.value;\r\n        // is falsy, a function schema or a yup schema\r\n        if (!rulesVal || isCallable(rulesVal) || isYupValidator(rulesVal)) {\r\n            return {};\r\n        }\r\n        return Object.keys(rulesVal).reduce((acc, rule) => {\r\n            const deps = extractLocators(rulesVal[rule])\r\n                .map((dep) => dep.__locatorRef)\r\n                .reduce((depAcc, depName) => {\r\n                const depValue = getFromPath(form.values, depName) || form.values[depName];\r\n                if (depValue !== undefined) {\r\n                    depAcc[depName] = depValue;\r\n                }\r\n                return depAcc;\r\n            }, {});\r\n            Object.assign(acc, deps);\r\n            return acc;\r\n        }, {});\r\n    });\r\n    // Adds a watcher that runs the validation whenever field dependencies change\r\n    watch(dependencies, (deps, oldDeps) => {\r\n        // Skip if no dependencies or if the field wasn't manipulated\r\n        if (!Object.keys(deps).length) {\r\n            return;\r\n        }\r\n        const shouldValidate = !es6(deps, oldDeps);\r\n        if (shouldValidate) {\r\n            meta.validated ? validateWithStateMutation() : validateValidStateOnly();\r\n        }\r\n    });\r\n    return field;\r\n}\r\n/**\r\n * Normalizes partial field options to include the full options\r\n */\r\nfunction normalizeOptions(name, opts) {\r\n    const defaults = () => ({\r\n        initialValue: undefined,\r\n        validateOnMount: false,\r\n        bails: true,\r\n        rules: '',\r\n        label: name,\r\n        validateOnValueUpdate: true,\r\n        standalone: false,\r\n    });\r\n    if (!opts) {\r\n        return defaults();\r\n    }\r\n    // TODO: Deprecate this in next major release\r\n    const checkedValue = 'valueProp' in opts ? opts.valueProp : opts.checkedValue;\r\n    return Object.assign(Object.assign(Object.assign({}, defaults()), (opts || {})), { checkedValue });\r\n}\r\n/**\r\n * Extracts the validation rules from a schema\r\n */\r\nfunction extractRuleFromSchema(schema, fieldName) {\r\n    // no schema at all\r\n    if (!schema) {\r\n        return undefined;\r\n    }\r\n    // there is a key on the schema object for this field\r\n    return schema[fieldName];\r\n}\r\nfunction useCheckboxField(name, rules, opts) {\r\n    const form = !(opts === null || opts === void 0 ? void 0 : opts.standalone) ? injectWithSelf(FormContextKey) : undefined;\r\n    const checkedValue = opts === null || opts === void 0 ? void 0 : opts.checkedValue;\r\n    const uncheckedValue = opts === null || opts === void 0 ? void 0 : opts.uncheckedValue;\r\n    function patchCheckboxApi(field) {\r\n        const handleChange = field.handleChange;\r\n        const checked = computed(() => {\r\n            const currentValue = unref(field.value);\r\n            const checkedVal = unref(checkedValue);\r\n            return Array.isArray(currentValue) ? currentValue.includes(checkedVal) : checkedVal === currentValue;\r\n        });\r\n        function handleCheckboxChange(e, shouldValidate = true) {\r\n            var _a, _b;\r\n            if (checked.value === ((_b = (_a = e) === null || _a === void 0 ? void 0 : _a.target) === null || _b === void 0 ? void 0 : _b.checked)) {\r\n                return;\r\n            }\r\n            let newValue = normalizeEventValue(e);\r\n            // Single checkbox field without a form to toggle it's value\r\n            if (!form) {\r\n                newValue = resolveNextCheckboxValue(unref(field.value), unref(checkedValue), unref(uncheckedValue));\r\n            }\r\n            handleChange(newValue, shouldValidate);\r\n        }\r\n        onBeforeUnmount(() => {\r\n            // toggles the checkbox value if it was checked\r\n            if (checked.value) {\r\n                handleCheckboxChange(unref(checkedValue), false);\r\n            }\r\n        });\r\n        return Object.assign(Object.assign({}, field), { checked,\r\n            checkedValue,\r\n            uncheckedValue, handleChange: handleCheckboxChange });\r\n    }\r\n    return patchCheckboxApi(_useField(name, rules, opts));\r\n}\n\nconst FieldImpl = defineComponent({\r\n    name: 'Field',\r\n    inheritAttrs: false,\r\n    props: {\r\n        as: {\r\n            type: [String, Object],\r\n            default: undefined,\r\n        },\r\n        name: {\r\n            type: String,\r\n            required: true,\r\n        },\r\n        rules: {\r\n            type: [Object, String, Function],\r\n            default: undefined,\r\n        },\r\n        validateOnMount: {\r\n            type: Boolean,\r\n            default: false,\r\n        },\r\n        validateOnBlur: {\r\n            type: Boolean,\r\n            default: undefined,\r\n        },\r\n        validateOnChange: {\r\n            type: Boolean,\r\n            default: undefined,\r\n        },\r\n        validateOnInput: {\r\n            type: Boolean,\r\n            default: undefined,\r\n        },\r\n        validateOnModelUpdate: {\r\n            type: Boolean,\r\n            default: undefined,\r\n        },\r\n        bails: {\r\n            type: Boolean,\r\n            default: () => getConfig().bails,\r\n        },\r\n        label: {\r\n            type: String,\r\n            default: undefined,\r\n        },\r\n        uncheckedValue: {\r\n            type: null,\r\n            default: undefined,\r\n        },\r\n        modelValue: {\r\n            type: null,\r\n            default: IS_ABSENT,\r\n        },\r\n        modelModifiers: {\r\n            type: null,\r\n            default: () => ({}),\r\n        },\r\n        'onUpdate:modelValue': {\r\n            type: null,\r\n            default: undefined,\r\n        },\r\n        standalone: {\r\n            type: Boolean,\r\n            default: false,\r\n        },\r\n    },\r\n    setup(props, ctx) {\r\n        const rules = toRef(props, 'rules');\r\n        const name = toRef(props, 'name');\r\n        const label = toRef(props, 'label');\r\n        const uncheckedValue = toRef(props, 'uncheckedValue');\r\n        const hasModelEvents = isPropPresent(props, 'onUpdate:modelValue');\r\n        const { errors, value, errorMessage, validate: validateField, handleChange, handleBlur, setTouched, resetField, handleReset, meta, checked, setErrors, } = useField(name, rules, {\r\n            validateOnMount: props.validateOnMount,\r\n            bails: props.bails,\r\n            standalone: props.standalone,\r\n            type: ctx.attrs.type,\r\n            initialValue: resolveInitialValue(props, ctx),\r\n            // Only for checkboxes and radio buttons\r\n            checkedValue: ctx.attrs.value,\r\n            uncheckedValue,\r\n            label,\r\n            validateOnValueUpdate: false,\r\n        });\r\n        // If there is a v-model applied on the component we need to emit the `update:modelValue` whenever the value binding changes\r\n        const onChangeHandler = hasModelEvents\r\n            ? function handleChangeWithModel(e, shouldValidate = true) {\r\n                handleChange(e, shouldValidate);\r\n                ctx.emit('update:modelValue', value.value);\r\n            }\r\n            : handleChange;\r\n        const handleInput = (e) => {\r\n            if (!hasCheckedAttr(ctx.attrs.type)) {\r\n                value.value = normalizeEventValue(e);\r\n            }\r\n        };\r\n        const onInputHandler = hasModelEvents\r\n            ? function handleInputWithModel(e) {\r\n                handleInput(e);\r\n                ctx.emit('update:modelValue', value.value);\r\n            }\r\n            : handleInput;\r\n        const fieldProps = computed(() => {\r\n            const { validateOnInput, validateOnChange, validateOnBlur, validateOnModelUpdate } = resolveValidationTriggers(props);\r\n            const baseOnBlur = [handleBlur, ctx.attrs.onBlur, validateOnBlur ? validateField : undefined].filter(Boolean);\r\n            const baseOnInput = [(e) => onChangeHandler(e, validateOnInput), ctx.attrs.onInput].filter(Boolean);\r\n            const baseOnChange = [(e) => onChangeHandler(e, validateOnChange), ctx.attrs.onChange].filter(Boolean);\r\n            const attrs = {\r\n                name: props.name,\r\n                onBlur: baseOnBlur,\r\n                onInput: baseOnInput,\r\n                onChange: baseOnChange,\r\n            };\r\n            attrs['onUpdate:modelValue'] = e => onChangeHandler(e, validateOnModelUpdate);\r\n            if (hasCheckedAttr(ctx.attrs.type) && checked) {\r\n                attrs.checked = checked.value;\r\n            }\r\n            else {\r\n                attrs.value = value.value;\r\n            }\r\n            const tag = resolveTag(props, ctx);\r\n            if (shouldHaveValueBinding(tag, ctx.attrs)) {\r\n                delete attrs.value;\r\n            }\r\n            return attrs;\r\n        });\r\n        const modelValue = toRef(props, 'modelValue');\r\n        watch(modelValue, newModelValue => {\r\n            // Don't attempt to sync absent values\r\n            if (newModelValue === IS_ABSENT && value.value === undefined) {\r\n                return;\r\n            }\r\n            if (newModelValue !== applyModifiers(value.value, props.modelModifiers)) {\r\n                value.value = newModelValue === IS_ABSENT ? undefined : newModelValue;\r\n                validateField();\r\n            }\r\n        });\r\n        function slotProps() {\r\n            return {\r\n                field: fieldProps.value,\r\n                value: value.value,\r\n                meta,\r\n                errors: errors.value,\r\n                errorMessage: errorMessage.value,\r\n                validate: validateField,\r\n                resetField,\r\n                handleChange: onChangeHandler,\r\n                handleInput: onInputHandler,\r\n                handleReset,\r\n                handleBlur,\r\n                setTouched,\r\n                setErrors,\r\n            };\r\n        }\r\n        ctx.expose({\r\n            setErrors,\r\n            setTouched,\r\n            reset: resetField,\r\n            validate: validateField,\r\n            handleChange,\r\n        });\r\n        return () => {\r\n            const tag = resolveDynamicComponent(resolveTag(props, ctx));\r\n            const children = normalizeChildren(tag, ctx, slotProps);\r\n            if (tag) {\r\n                return h(tag, Object.assign(Object.assign({}, ctx.attrs), fieldProps.value), children);\r\n            }\r\n            return children;\r\n        };\r\n    },\r\n});\r\nfunction resolveTag(props, ctx) {\r\n    let tag = props.as || '';\r\n    if (!props.as && !ctx.slots.default) {\r\n        tag = 'input';\r\n    }\r\n    return tag;\r\n}\r\nfunction resolveValidationTriggers(props) {\r\n    var _a, _b, _c, _d;\r\n    const { validateOnInput, validateOnChange, validateOnBlur, validateOnModelUpdate } = getConfig();\r\n    return {\r\n        validateOnInput: (_a = props.validateOnInput) !== null && _a !== void 0 ? _a : validateOnInput,\r\n        validateOnChange: (_b = props.validateOnChange) !== null && _b !== void 0 ? _b : validateOnChange,\r\n        validateOnBlur: (_c = props.validateOnBlur) !== null && _c !== void 0 ? _c : validateOnBlur,\r\n        validateOnModelUpdate: (_d = props.validateOnModelUpdate) !== null && _d !== void 0 ? _d : validateOnModelUpdate,\r\n    };\r\n}\r\nfunction applyModifiers(value, modifiers) {\r\n    if (modifiers.number) {\r\n        return toNumber(value);\r\n    }\r\n    return value;\r\n}\r\nfunction resolveInitialValue(props, ctx) {\r\n    // Gets the initial value either from `value` prop/attr or `v-model` binding (modelValue)\r\n    // For checkboxes and radio buttons it will always be the model value not the `value` attribute\r\n    if (!hasCheckedAttr(ctx.attrs.type)) {\r\n        return isPropPresent(props, 'modelValue') ? props.modelValue : ctx.attrs.value;\r\n    }\r\n    return isPropPresent(props, 'modelValue') ? props.modelValue : undefined;\r\n}\r\nconst Field = FieldImpl;\n\nlet FORM_COUNTER = 0;\r\nfunction useForm(opts) {\r\n    const formId = FORM_COUNTER++;\r\n    // Prevents fields from double resetting their values, which causes checkboxes to toggle their initial value\r\n    // TODO: This won't be needed if we centralize all the state inside the `form` for form inputs\r\n    let RESET_LOCK = false;\r\n    // A lookup containing fields or field groups\r\n    const fieldsByPath = ref({});\r\n    // If the form is currently submitting\r\n    const isSubmitting = ref(false);\r\n    // The number of times the user tried to submit the form\r\n    const submitCount = ref(0);\r\n    // dictionary for field arrays to receive various signals like reset\r\n    const fieldArraysLookup = {};\r\n    // a private ref for all form values\r\n    const formValues = reactive(klona(unref(opts === null || opts === void 0 ? void 0 : opts.initialValues) || {}));\r\n    // the source of errors for the form fields\r\n    const { errorBag, setErrorBag, setFieldErrorBag } = useErrorBag(opts === null || opts === void 0 ? void 0 : opts.initialErrors);\r\n    // Gets the first error of each field\r\n    const errors = computed(() => {\r\n        return keysOf(errorBag.value).reduce((acc, key) => {\r\n            const bag = errorBag.value[key];\r\n            if (bag && bag.length) {\r\n                acc[key] = bag[0];\r\n            }\r\n            return acc;\r\n        }, {});\r\n    });\r\n    function getFirstFieldAtPath(path) {\r\n        const fieldOrGroup = fieldsByPath.value[path];\r\n        return Array.isArray(fieldOrGroup) ? fieldOrGroup[0] : fieldOrGroup;\r\n    }\r\n    function fieldExists(path) {\r\n        return !!fieldsByPath.value[path];\r\n    }\r\n    /**\r\n     * Holds a computed reference to all fields names and labels\r\n     */\r\n    const fieldNames = computed(() => {\r\n        return keysOf(fieldsByPath.value).reduce((names, path) => {\r\n            const field = getFirstFieldAtPath(path);\r\n            if (field) {\r\n                names[path] = unref(field.label || field.name) || '';\r\n            }\r\n            return names;\r\n        }, {});\r\n    });\r\n    const fieldBailsMap = computed(() => {\r\n        return keysOf(fieldsByPath.value).reduce((map, path) => {\r\n            var _a;\r\n            const field = getFirstFieldAtPath(path);\r\n            if (field) {\r\n                map[path] = (_a = field.bails) !== null && _a !== void 0 ? _a : true;\r\n            }\r\n            return map;\r\n        }, {});\r\n    });\r\n    // mutable non-reactive reference to initial errors\r\n    // we need this to process initial errors then unset them\r\n    const initialErrors = Object.assign({}, ((opts === null || opts === void 0 ? void 0 : opts.initialErrors) || {}));\r\n    // initial form values\r\n    const { initialValues, originalInitialValues, setInitialValues } = useFormInitialValues(fieldsByPath, formValues, opts === null || opts === void 0 ? void 0 : opts.initialValues);\r\n    // form meta aggregations\r\n    const meta = useFormMeta(fieldsByPath, formValues, initialValues, errors);\r\n    const schema = opts === null || opts === void 0 ? void 0 : opts.validationSchema;\r\n    const formCtx = {\r\n        formId,\r\n        fieldsByPath,\r\n        values: formValues,\r\n        errorBag,\r\n        errors,\r\n        schema,\r\n        submitCount,\r\n        meta,\r\n        isSubmitting,\r\n        fieldArraysLookup,\r\n        validateSchema: unref(schema) ? validateSchema : undefined,\r\n        validate,\r\n        register: registerField,\r\n        unregister: unregisterField,\r\n        setFieldErrorBag,\r\n        validateField,\r\n        setFieldValue,\r\n        setValues,\r\n        setErrors,\r\n        setFieldError,\r\n        setFieldTouched,\r\n        setTouched,\r\n        resetForm,\r\n        handleSubmit,\r\n        stageInitialValue,\r\n        unsetInitialValue,\r\n        setFieldInitialValue,\r\n    };\r\n    function isFieldGroup(fieldOrGroup) {\r\n        return Array.isArray(fieldOrGroup);\r\n    }\r\n    function applyFieldMutation(fieldOrGroup, mutation) {\r\n        if (Array.isArray(fieldOrGroup)) {\r\n            return fieldOrGroup.forEach(mutation);\r\n        }\r\n        return mutation(fieldOrGroup);\r\n    }\r\n    function mutateAllFields(mutation) {\r\n        Object.values(fieldsByPath.value).forEach(field => {\r\n            if (!field) {\r\n                return;\r\n            }\r\n            // avoid resetting the field values, because they should've been reset already.\r\n            applyFieldMutation(field, mutation);\r\n        });\r\n    }\r\n    /**\r\n     * Manually sets an error message on a specific field\r\n     */\r\n    function setFieldError(field, message) {\r\n        setFieldErrorBag(field, message);\r\n    }\r\n    /**\r\n     * Sets errors for the fields specified in the object\r\n     */\r\n    function setErrors(fields) {\r\n        setErrorBag(fields);\r\n    }\r\n    /**\r\n     * Sets a single field value\r\n     */\r\n    function setFieldValue(field, value, { force } = { force: false }) {\r\n        var _a;\r\n        const fieldInstance = fieldsByPath.value[field];\r\n        const clonedValue = klona(value);\r\n        // field wasn't found, create a virtual field as a placeholder\r\n        if (!fieldInstance) {\r\n            setInPath(formValues, field, clonedValue);\r\n            return;\r\n        }\r\n        if (isFieldGroup(fieldInstance) && ((_a = fieldInstance[0]) === null || _a === void 0 ? void 0 : _a.type) === 'checkbox' && !Array.isArray(value)) {\r\n            // Multiple checkboxes, and only one of them got updated\r\n            const newValue = klona(resolveNextCheckboxValue(getFromPath(formValues, field) || [], value, undefined));\r\n            setInPath(formValues, field, newValue);\r\n            return;\r\n        }\r\n        let newValue = value;\r\n        // Single Checkbox: toggles the field value unless the field is being reset then force it\r\n        if (!isFieldGroup(fieldInstance) && fieldInstance.type === 'checkbox' && !force && !RESET_LOCK) {\r\n            newValue = klona(resolveNextCheckboxValue(getFromPath(formValues, field), value, unref(fieldInstance.uncheckedValue)));\r\n        }\r\n        setInPath(formValues, field, newValue);\r\n    }\r\n    /**\r\n     * Sets multiple fields values\r\n     */\r\n    function setValues(fields) {\r\n        // clean up old values\r\n        keysOf(formValues).forEach(key => {\r\n            delete formValues[key];\r\n        });\r\n        // set up new values\r\n        keysOf(fields).forEach(path => {\r\n            setFieldValue(path, fields[path]);\r\n        });\r\n        // regenerate the arrays when the form values change\r\n        Object.values(fieldArraysLookup).forEach(f => f && f.reset());\r\n    }\r\n    /**\r\n     * Sets the touched meta state on a field\r\n     */\r\n    function setFieldTouched(field, isTouched) {\r\n        const fieldInstance = fieldsByPath.value[field];\r\n        if (fieldInstance) {\r\n            applyFieldMutation(fieldInstance, f => f.setTouched(isTouched));\r\n        }\r\n    }\r\n    /**\r\n     * Sets the touched meta state on multiple fields\r\n     */\r\n    function setTouched(fields) {\r\n        keysOf(fields).forEach(field => {\r\n            setFieldTouched(field, !!fields[field]);\r\n        });\r\n    }\r\n    /**\r\n     * Resets all fields\r\n     */\r\n    function resetForm(state) {\r\n        RESET_LOCK = true;\r\n        // set initial values if provided\r\n        if (state === null || state === void 0 ? void 0 : state.values) {\r\n            setInitialValues(state.values);\r\n            setValues(state === null || state === void 0 ? void 0 : state.values);\r\n        }\r\n        else {\r\n            // clean up the initial values back to the original\r\n            setInitialValues(originalInitialValues.value);\r\n            // otherwise clean the current values\r\n            setValues(originalInitialValues.value);\r\n        }\r\n        // avoid resetting the field values, because they should've been reset already.\r\n        mutateAllFields(f => f.resetField());\r\n        if (state === null || state === void 0 ? void 0 : state.touched) {\r\n            setTouched(state.touched);\r\n        }\r\n        setErrors((state === null || state === void 0 ? void 0 : state.errors) || {});\r\n        submitCount.value = (state === null || state === void 0 ? void 0 : state.submitCount) || 0;\r\n        nextTick(() => {\r\n            RESET_LOCK = false;\r\n        });\r\n    }\r\n    function insertFieldAtPath(field, path) {\r\n        const rawField = markRaw(field);\r\n        const fieldPath = path;\r\n        // first field at that path\r\n        if (!fieldsByPath.value[fieldPath]) {\r\n            fieldsByPath.value[fieldPath] = rawField;\r\n            return;\r\n        }\r\n        const fieldAtPath = fieldsByPath.value[fieldPath];\r\n        if (fieldAtPath && !Array.isArray(fieldAtPath)) {\r\n            fieldsByPath.value[fieldPath] = [fieldAtPath];\r\n        }\r\n        // add the new array to that path\r\n        fieldsByPath.value[fieldPath] = [...fieldsByPath.value[fieldPath], rawField];\r\n    }\r\n    function removeFieldFromPath(field, path) {\r\n        const fieldPath = path;\r\n        const fieldAtPath = fieldsByPath.value[fieldPath];\r\n        if (!fieldAtPath) {\r\n            return;\r\n        }\r\n        // same field at path\r\n        if (!isFieldGroup(fieldAtPath) && field.id === fieldAtPath.id) {\r\n            delete fieldsByPath.value[fieldPath];\r\n            return;\r\n        }\r\n        if (isFieldGroup(fieldAtPath)) {\r\n            const idx = fieldAtPath.findIndex(f => f.id === field.id);\r\n            if (idx === -1) {\r\n                return;\r\n            }\r\n            fieldAtPath.splice(idx, 1);\r\n            if (fieldAtPath.length === 1) {\r\n                fieldsByPath.value[fieldPath] = fieldAtPath[0];\r\n                return;\r\n            }\r\n            if (!fieldAtPath.length) {\r\n                delete fieldsByPath.value[fieldPath];\r\n            }\r\n        }\r\n    }\r\n    function registerField(field) {\r\n        const fieldPath = unref(field.name);\r\n        insertFieldAtPath(field, fieldPath);\r\n        if (isRef(field.name)) {\r\n            // ensures when a field's name was already taken that it preserves its same value\r\n            // necessary for fields generated by loops\r\n            watch(field.name, async (newPath, oldPath) => {\r\n                // cache the value\r\n                await nextTick();\r\n                removeFieldFromPath(field, oldPath);\r\n                insertFieldAtPath(field, newPath);\r\n                // re-validate if either path had errors before\r\n                if (errors.value[oldPath] || errors.value[newPath]) {\r\n                    // clear up both paths errors\r\n                    setFieldError(oldPath, undefined);\r\n                    validateField(newPath);\r\n                }\r\n                // clean up the old path if no other field is sharing that name\r\n                // #3325\r\n                await nextTick();\r\n                if (!fieldExists(oldPath)) {\r\n                    unsetPath(formValues, oldPath);\r\n                }\r\n            });\r\n        }\r\n        // if field already had errors (initial errors) that's not user-set, validate it again to ensure state is correct\r\n        // the difference being that `initialErrors` will contain the error message while other errors (pre-validated schema) won't have them as initial errors\r\n        // #3342\r\n        const initialErrorMessage = unref(field.errorMessage);\r\n        if (initialErrorMessage && (initialErrors === null || initialErrors === void 0 ? void 0 : initialErrors[fieldPath]) !== initialErrorMessage) {\r\n            validateField(fieldPath);\r\n        }\r\n        // marks the initial error as \"consumed\" so it won't be matched later with same non-initial error\r\n        delete initialErrors[fieldPath];\r\n    }\r\n    function unregisterField(field) {\r\n        const fieldName = unref(field.name);\r\n        removeFieldFromPath(field, fieldName);\r\n        nextTick(() => {\r\n            // clears a field error on unmounted\r\n            // we wait till next tick to make sure if the field is completely removed and doesn't have any siblings like checkboxes\r\n            // #3384\r\n            if (!fieldExists(fieldName)) {\r\n                setFieldError(fieldName, undefined);\r\n                unsetPath(formValues, fieldName);\r\n            }\r\n        });\r\n    }\r\n    async function validate(opts) {\r\n        mutateAllFields(f => (f.meta.validated = true));\r\n        if (formCtx.validateSchema) {\r\n            return formCtx.validateSchema((opts === null || opts === void 0 ? void 0 : opts.mode) || 'force');\r\n        }\r\n        // No schema, each field is responsible to validate itself\r\n        const validations = await Promise.all(Object.values(fieldsByPath.value).map(field => {\r\n            const fieldInstance = Array.isArray(field) ? field[0] : field;\r\n            if (!fieldInstance) {\r\n                return Promise.resolve({ key: '', valid: true, errors: [] });\r\n            }\r\n            return fieldInstance.validate(opts).then((result) => {\r\n                return {\r\n                    key: unref(fieldInstance.name),\r\n                    valid: result.valid,\r\n                    errors: result.errors,\r\n                };\r\n            });\r\n        }));\r\n        const results = {};\r\n        const errors = {};\r\n        for (const validation of validations) {\r\n            results[validation.key] = {\r\n                valid: validation.valid,\r\n                errors: validation.errors,\r\n            };\r\n            if (validation.errors.length) {\r\n                errors[validation.key] = validation.errors[0];\r\n            }\r\n        }\r\n        return {\r\n            valid: validations.every(r => r.valid),\r\n            results,\r\n            errors,\r\n        };\r\n    }\r\n    async function validateField(field) {\r\n        const fieldInstance = fieldsByPath.value[field];\r\n        if (!fieldInstance) {\r\n            warn$1(`field with name ${field} was not found`);\r\n            return Promise.resolve({ errors: [], valid: true });\r\n        }\r\n        if (Array.isArray(fieldInstance)) {\r\n            return fieldInstance.map(f => f.validate())[0];\r\n        }\r\n        return fieldInstance.validate();\r\n    }\r\n    function handleSubmit(fn, onValidationError) {\r\n        return function submissionHandler(e) {\r\n            if (e instanceof Event) {\r\n                e.preventDefault();\r\n                e.stopPropagation();\r\n            }\r\n            // Touch all fields\r\n            setTouched(keysOf(fieldsByPath.value).reduce((acc, field) => {\r\n                acc[field] = true;\r\n                return acc;\r\n            }, {}));\r\n            isSubmitting.value = true;\r\n            submitCount.value++;\r\n            return validate()\r\n                .then(result => {\r\n                if (result.valid && typeof fn === 'function') {\r\n                    return fn(klona(formValues), {\r\n                        evt: e,\r\n                        setErrors,\r\n                        setFieldError,\r\n                        setTouched,\r\n                        setFieldTouched,\r\n                        setValues,\r\n                        setFieldValue,\r\n                        resetForm,\r\n                    });\r\n                }\r\n                if (!result.valid && typeof onValidationError === 'function') {\r\n                    onValidationError({\r\n                        values: klona(formValues),\r\n                        evt: e,\r\n                        errors: result.errors,\r\n                        results: result.results,\r\n                    });\r\n                }\r\n            })\r\n                .then(returnVal => {\r\n                isSubmitting.value = false;\r\n                return returnVal;\r\n            }, err => {\r\n                isSubmitting.value = false;\r\n                // re-throw the err so it doesn't go silent\r\n                throw err;\r\n            });\r\n        };\r\n    }\r\n    function setFieldInitialValue(path, value) {\r\n        setInPath(initialValues.value, path, klona(value));\r\n    }\r\n    function unsetInitialValue(path) {\r\n        unsetPath(initialValues.value, path);\r\n    }\r\n    /**\r\n     * Sneaky function to set initial field values\r\n     */\r\n    function stageInitialValue(path, value) {\r\n        setInPath(formValues, path, value);\r\n        setFieldInitialValue(path, value);\r\n    }\r\n    async function _validateSchema() {\r\n        const schemaValue = unref(schema);\r\n        if (!schemaValue) {\r\n            return { valid: true, results: {}, errors: {} };\r\n        }\r\n        const formResult = isYupValidator(schemaValue)\r\n            ? await validateYupSchema(schemaValue, formValues)\r\n            : await validateObjectSchema(schemaValue, formValues, {\r\n                names: fieldNames.value,\r\n                bailsMap: fieldBailsMap.value,\r\n            });\r\n        return formResult;\r\n    }\r\n    /**\r\n     * Batches validation runs in 5ms batches\r\n     */\r\n    const debouncedSchemaValidation = debounceAsync(_validateSchema, 5);\r\n    async function validateSchema(mode) {\r\n        const formResult = await debouncedSchemaValidation();\r\n        // fields by id lookup\r\n        const fieldsById = formCtx.fieldsByPath.value || {};\r\n        // errors fields names, we need it to also check if custom errors are updated\r\n        const currentErrorsPaths = keysOf(formCtx.errorBag.value);\r\n        // collect all the keys from the schema and all fields\r\n        // this ensures we have a complete keymap of all the fields\r\n        const paths = [\r\n            ...new Set([...keysOf(formResult.results), ...keysOf(fieldsById), ...currentErrorsPaths]),\r\n        ];\r\n        // aggregates the paths into a single result object while applying the results on the fields\r\n        return paths.reduce((validation, path) => {\r\n            const field = fieldsById[path];\r\n            const messages = (formResult.results[path] || { errors: [] }).errors;\r\n            const fieldResult = {\r\n                errors: messages,\r\n                valid: !messages.length,\r\n            };\r\n            validation.results[path] = fieldResult;\r\n            if (!fieldResult.valid) {\r\n                validation.errors[path] = fieldResult.errors[0];\r\n            }\r\n            // field not rendered\r\n            if (!field) {\r\n                setFieldError(path, messages);\r\n                return validation;\r\n            }\r\n            // always update the valid flag regardless of the mode\r\n            applyFieldMutation(field, f => (f.meta.valid = fieldResult.valid));\r\n            if (mode === 'silent') {\r\n                return validation;\r\n            }\r\n            const wasValidated = Array.isArray(field) ? field.some(f => f.meta.validated) : field.meta.validated;\r\n            if (mode === 'validated-only' && !wasValidated) {\r\n                return validation;\r\n            }\r\n            applyFieldMutation(field, f => f.setState({ errors: fieldResult.errors }));\r\n            return validation;\r\n        }, { valid: formResult.valid, results: {}, errors: {} });\r\n    }\r\n    const submitForm = handleSubmit((_, { evt }) => {\r\n        if (isFormSubmitEvent(evt)) {\r\n            evt.target.submit();\r\n        }\r\n    });\r\n    // Trigger initial validation\r\n    onMounted(() => {\r\n        if (opts === null || opts === void 0 ? void 0 : opts.initialErrors) {\r\n            setErrors(opts.initialErrors);\r\n        }\r\n        if (opts === null || opts === void 0 ? void 0 : opts.initialTouched) {\r\n            setTouched(opts.initialTouched);\r\n        }\r\n        // if validate on mount was enabled\r\n        if (opts === null || opts === void 0 ? void 0 : opts.validateOnMount) {\r\n            validate();\r\n            return;\r\n        }\r\n        // otherwise run initial silent validation through schema if available\r\n        // the useField should skip their own silent validation if a yup schema is present\r\n        if (formCtx.validateSchema) {\r\n            formCtx.validateSchema('silent');\r\n        }\r\n    });\r\n    if (isRef(schema)) {\r\n        watch(schema, () => {\r\n            var _a;\r\n            (_a = formCtx.validateSchema) === null || _a === void 0 ? void 0 : _a.call(formCtx, 'validated-only');\r\n        });\r\n    }\r\n    // Provide injections\r\n    provide(FormContextKey, formCtx);\r\n    if ((process.env.NODE_ENV !== 'production')) {\r\n        registerFormWithDevTools(formCtx);\r\n        watch(() => (Object.assign(Object.assign({ errors: errorBag.value }, meta.value), { values: formValues, isSubmitting: isSubmitting.value, submitCount: submitCount.value })), refreshInspector, {\r\n            deep: true,\r\n        });\r\n    }\r\n    return {\r\n        errors,\r\n        meta,\r\n        values: formValues,\r\n        isSubmitting,\r\n        submitCount,\r\n        validate,\r\n        validateField,\r\n        handleReset: () => resetForm(),\r\n        resetForm,\r\n        handleSubmit,\r\n        submitForm,\r\n        setFieldError,\r\n        setErrors,\r\n        setFieldValue,\r\n        setValues,\r\n        setFieldTouched,\r\n        setTouched,\r\n    };\r\n}\r\n/**\r\n * Manages form meta aggregation\r\n */\r\nfunction useFormMeta(fieldsByPath, currentValues, initialValues, errors) {\r\n    const MERGE_STRATEGIES = {\r\n        touched: 'some',\r\n        pending: 'some',\r\n        valid: 'every',\r\n    };\r\n    const isDirty = computed(() => {\r\n        return !es6(currentValues, unref(initialValues));\r\n    });\r\n    function calculateFlags() {\r\n        const fields = Object.values(fieldsByPath.value).flat(1).filter(Boolean);\r\n        return keysOf(MERGE_STRATEGIES).reduce((acc, flag) => {\r\n            const mergeMethod = MERGE_STRATEGIES[flag];\r\n            acc[flag] = fields[mergeMethod](field => field.meta[flag]);\r\n            return acc;\r\n        }, {});\r\n    }\r\n    const flags = reactive(calculateFlags());\r\n    watchEffect(() => {\r\n        const value = calculateFlags();\r\n        flags.touched = value.touched;\r\n        flags.valid = value.valid;\r\n        flags.pending = value.pending;\r\n    });\r\n    return computed(() => {\r\n        return Object.assign(Object.assign({ initialValues: unref(initialValues) }, flags), { valid: flags.valid && !keysOf(errors.value).length, dirty: isDirty.value });\r\n    });\r\n}\r\n/**\r\n * Manages the initial values prop\r\n */\r\nfunction useFormInitialValues(fields, formValues, providedValues) {\r\n    // these are the mutable initial values as the fields are mounted/unmounted\r\n    const initialValues = ref(klona(unref(providedValues)) || {});\r\n    // these are the original initial value as provided by the user initially, they don't keep track of conditional fields\r\n    // this is important because some conditional fields will overwrite the initial values for other fields who had the same name\r\n    // like array fields, any push/insert operation will overwrite the initial values because they \"create new fields\"\r\n    // so these are the values that the reset function should use\r\n    // these only change when the user explicitly chanegs the initial values or when the user resets them with new values.\r\n    const originalInitialValues = ref(klona(unref(providedValues)) || {});\r\n    function setInitialValues(values, updateFields = false) {\r\n        initialValues.value = klona(values);\r\n        originalInitialValues.value = klona(values);\r\n        if (!updateFields) {\r\n            return;\r\n        }\r\n        // update the pristine non-touched fields\r\n        // those are excluded because it's unlikely you want to change the form values using initial values\r\n        // we mostly watch them for API population or newly inserted fields\r\n        // if the user API is taking too much time before user interaction they should consider disabling or hiding their inputs until the values are ready\r\n        keysOf(fields.value).forEach(fieldPath => {\r\n            const field = fields.value[fieldPath];\r\n            const wasTouched = Array.isArray(field) ? field.some(f => f.meta.touched) : field === null || field === void 0 ? void 0 : field.meta.touched;\r\n            if (!field || wasTouched) {\r\n                return;\r\n            }\r\n            const newValue = getFromPath(initialValues.value, fieldPath);\r\n            setInPath(formValues, fieldPath, klona(newValue));\r\n        });\r\n    }\r\n    if (isRef(providedValues)) {\r\n        watch(providedValues, value => {\r\n            setInitialValues(value, true);\r\n        }, {\r\n            deep: true,\r\n        });\r\n    }\r\n    return {\r\n        initialValues,\r\n        originalInitialValues,\r\n        setInitialValues,\r\n    };\r\n}\r\nfunction useErrorBag(initialErrors) {\r\n    const errorBag = ref({});\r\n    function normalizeErrorItem(message) {\r\n        return Array.isArray(message) ? message : message ? [message] : [];\r\n    }\r\n    /**\r\n     * Manually sets an error message on a specific field\r\n     */\r\n    function setFieldErrorBag(field, message) {\r\n        if (!message) {\r\n            delete errorBag.value[field];\r\n            return;\r\n        }\r\n        errorBag.value[field] = normalizeErrorItem(message);\r\n    }\r\n    /**\r\n     * Sets errors for the fields specified in the object\r\n     */\r\n    function setErrorBag(fields) {\r\n        errorBag.value = keysOf(fields).reduce((acc, key) => {\r\n            const message = fields[key];\r\n            if (message) {\r\n                acc[key] = normalizeErrorItem(message);\r\n            }\r\n            return acc;\r\n        }, {});\r\n    }\r\n    if (initialErrors) {\r\n        setErrorBag(initialErrors);\r\n    }\r\n    return {\r\n        errorBag,\r\n        setErrorBag,\r\n        setFieldErrorBag,\r\n    };\r\n}\n\nconst FormImpl = defineComponent({\r\n    name: 'Form',\r\n    inheritAttrs: false,\r\n    props: {\r\n        as: {\r\n            type: String,\r\n            default: 'form',\r\n        },\r\n        validationSchema: {\r\n            type: Object,\r\n            default: undefined,\r\n        },\r\n        initialValues: {\r\n            type: Object,\r\n            default: undefined,\r\n        },\r\n        initialErrors: {\r\n            type: Object,\r\n            default: undefined,\r\n        },\r\n        initialTouched: {\r\n            type: Object,\r\n            default: undefined,\r\n        },\r\n        validateOnMount: {\r\n            type: Boolean,\r\n            default: false,\r\n        },\r\n        onSubmit: {\r\n            type: Function,\r\n            default: undefined,\r\n        },\r\n        onInvalidSubmit: {\r\n            type: Function,\r\n            default: undefined,\r\n        },\r\n    },\r\n    setup(props, ctx) {\r\n        const initialValues = toRef(props, 'initialValues');\r\n        const validationSchema = toRef(props, 'validationSchema');\r\n        const { errors, values, meta, isSubmitting, submitCount, validate, validateField, handleReset, resetForm, handleSubmit, submitForm, setErrors, setFieldError, setFieldValue, setValues, setFieldTouched, setTouched, } = useForm({\r\n            validationSchema: validationSchema.value ? validationSchema : undefined,\r\n            initialValues,\r\n            initialErrors: props.initialErrors,\r\n            initialTouched: props.initialTouched,\r\n            validateOnMount: props.validateOnMount,\r\n        });\r\n        const onSubmit = props.onSubmit ? handleSubmit(props.onSubmit, props.onInvalidSubmit) : submitForm;\r\n        function handleFormReset(e) {\r\n            if (isEvent(e)) {\r\n                // Prevent default form reset behavior\r\n                e.preventDefault();\r\n            }\r\n            handleReset();\r\n            if (typeof ctx.attrs.onReset === 'function') {\r\n                ctx.attrs.onReset();\r\n            }\r\n        }\r\n        function handleScopedSlotSubmit(evt, onSubmit) {\r\n            const onSuccess = typeof evt === 'function' && !onSubmit ? evt : onSubmit;\r\n            return handleSubmit(onSuccess, props.onInvalidSubmit)(evt);\r\n        }\r\n        function slotProps() {\r\n            return {\r\n                meta: meta.value,\r\n                errors: errors.value,\r\n                values: values,\r\n                isSubmitting: isSubmitting.value,\r\n                submitCount: submitCount.value,\r\n                validate,\r\n                validateField,\r\n                handleSubmit: handleScopedSlotSubmit,\r\n                handleReset,\r\n                submitForm,\r\n                setErrors,\r\n                setFieldError,\r\n                setFieldValue,\r\n                setValues,\r\n                setFieldTouched,\r\n                setTouched,\r\n                resetForm,\r\n            };\r\n        }\r\n        // expose these functions and methods as part of public API\r\n        ctx.expose({\r\n            setFieldError,\r\n            setErrors,\r\n            setFieldValue,\r\n            setValues,\r\n            setFieldTouched,\r\n            setTouched,\r\n            resetForm,\r\n            validate,\r\n            validateField,\r\n        });\r\n        return function renderForm() {\r\n            // avoid resolving the form component as itself\r\n            const tag = props.as === 'form' ? props.as : resolveDynamicComponent(props.as);\r\n            const children = normalizeChildren(tag, ctx, slotProps);\r\n            if (!props.as) {\r\n                return children;\r\n            }\r\n            // Attributes to add on a native `form` tag\r\n            const formAttrs = props.as === 'form'\r\n                ? {\r\n                    // Disables native validation as vee-validate will handle it.\r\n                    novalidate: true,\r\n                }\r\n                : {};\r\n            return h(tag, Object.assign(Object.assign(Object.assign({}, formAttrs), ctx.attrs), { onSubmit, onReset: handleFormReset }), children);\r\n        };\r\n    },\r\n});\r\nconst Form = FormImpl;\n\nlet FIELD_ARRAY_COUNTER = 0;\r\nfunction useFieldArray(arrayPath) {\r\n    const id = FIELD_ARRAY_COUNTER++;\r\n    const form = injectWithSelf(FormContextKey, undefined);\r\n    const fields = ref([]);\r\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n    const noOp = () => { };\r\n    const noOpApi = {\r\n        fields: readonly(fields),\r\n        remove: noOp,\r\n        push: noOp,\r\n        swap: noOp,\r\n        insert: noOp,\r\n        update: noOp,\r\n        replace: noOp,\r\n        prepend: noOp,\r\n    };\r\n    if (!form) {\r\n        warn('FieldArray requires being a child of `<Form/>` or `useForm` being called before it. Array fields may not work correctly');\r\n        return noOpApi;\r\n    }\r\n    if (!unref(arrayPath)) {\r\n        warn('FieldArray requires a field path to be provided, did you forget to pass the `name` prop?');\r\n        return noOpApi;\r\n    }\r\n    let entryCounter = 0;\r\n    function initFields() {\r\n        const currentValues = getFromPath(form === null || form === void 0 ? void 0 : form.values, unref(arrayPath), []);\r\n        fields.value = currentValues.map(createEntry);\r\n        updateEntryFlags();\r\n    }\r\n    initFields();\r\n    function updateEntryFlags() {\r\n        const fieldsLength = fields.value.length;\r\n        for (let i = 0; i < fieldsLength; i++) {\r\n            const entry = fields.value[i];\r\n            entry.isFirst = i === 0;\r\n            entry.isLast = i === fieldsLength - 1;\r\n        }\r\n    }\r\n    function createEntry(value) {\r\n        const key = entryCounter++;\r\n        const entry = {\r\n            key,\r\n            value: computed(() => {\r\n                const currentValues = getFromPath(form === null || form === void 0 ? void 0 : form.values, unref(arrayPath), []);\r\n                const idx = fields.value.findIndex(e => e.key === key);\r\n                return idx === -1 ? value : currentValues[idx];\r\n            }),\r\n            isFirst: false,\r\n            isLast: false,\r\n        };\r\n        return entry;\r\n    }\r\n    function remove(idx) {\r\n        const pathName = unref(arrayPath);\r\n        const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\r\n        if (!pathValue || !Array.isArray(pathValue)) {\r\n            return;\r\n        }\r\n        const newValue = [...pathValue];\r\n        newValue.splice(idx, 1);\r\n        form === null || form === void 0 ? void 0 : form.unsetInitialValue(pathName + `[${idx}]`);\r\n        form === null || form === void 0 ? void 0 : form.setFieldValue(pathName, newValue);\r\n        fields.value.splice(idx, 1);\r\n        updateEntryFlags();\r\n    }\r\n    function push(value) {\r\n        const pathName = unref(arrayPath);\r\n        const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\r\n        const normalizedPathValue = isNullOrUndefined(pathValue) ? [] : pathValue;\r\n        if (!Array.isArray(normalizedPathValue)) {\r\n            return;\r\n        }\r\n        const newValue = [...normalizedPathValue];\r\n        newValue.push(value);\r\n        form === null || form === void 0 ? void 0 : form.stageInitialValue(pathName + `[${newValue.length - 1}]`, value);\r\n        form === null || form === void 0 ? void 0 : form.setFieldValue(pathName, newValue);\r\n        fields.value.push(createEntry(value));\r\n        updateEntryFlags();\r\n    }\r\n    function swap(indexA, indexB) {\r\n        const pathName = unref(arrayPath);\r\n        const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\r\n        if (!Array.isArray(pathValue) || !(indexA in pathValue) || !(indexB in pathValue)) {\r\n            return;\r\n        }\r\n        const newValue = [...pathValue];\r\n        const newFields = [...fields.value];\r\n        // the old switcheroo\r\n        const temp = newValue[indexA];\r\n        newValue[indexA] = newValue[indexB];\r\n        newValue[indexB] = temp;\r\n        const tempEntry = newFields[indexA];\r\n        newFields[indexA] = newFields[indexB];\r\n        newFields[indexB] = tempEntry;\r\n        form === null || form === void 0 ? void 0 : form.setFieldValue(pathName, newValue);\r\n        fields.value = newFields;\r\n        updateEntryFlags();\r\n    }\r\n    function insert(idx, value) {\r\n        const pathName = unref(arrayPath);\r\n        const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\r\n        if (!Array.isArray(pathValue) || pathValue.length < idx) {\r\n            return;\r\n        }\r\n        const newValue = [...pathValue];\r\n        const newFields = [...fields.value];\r\n        newValue.splice(idx, 0, value);\r\n        newFields.splice(idx, 0, createEntry(value));\r\n        form === null || form === void 0 ? void 0 : form.setFieldValue(pathName, newValue);\r\n        fields.value = newFields;\r\n        updateEntryFlags();\r\n    }\r\n    function replace(arr) {\r\n        const pathName = unref(arrayPath);\r\n        form === null || form === void 0 ? void 0 : form.setFieldValue(pathName, arr);\r\n        initFields();\r\n    }\r\n    function update(idx, value) {\r\n        const pathName = unref(arrayPath);\r\n        const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\r\n        if (!Array.isArray(pathValue) || pathValue.length - 1 < idx) {\r\n            return;\r\n        }\r\n        form === null || form === void 0 ? void 0 : form.setFieldValue(`${pathName}[${idx}]`, value);\r\n    }\r\n    function prepend(value) {\r\n        const pathName = unref(arrayPath);\r\n        const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\r\n        const normalizedPathValue = isNullOrUndefined(pathValue) ? [] : pathValue;\r\n        if (!Array.isArray(normalizedPathValue)) {\r\n            return;\r\n        }\r\n        const newValue = [value, ...normalizedPathValue];\r\n        form === null || form === void 0 ? void 0 : form.stageInitialValue(pathName + `[${newValue.length - 1}]`, value);\r\n        form === null || form === void 0 ? void 0 : form.setFieldValue(pathName, newValue);\r\n        fields.value.unshift(createEntry(value));\r\n        updateEntryFlags();\r\n    }\r\n    form.fieldArraysLookup[id] = {\r\n        reset: initFields,\r\n    };\r\n    onBeforeUnmount(() => {\r\n        delete form.fieldArraysLookup[id];\r\n    });\r\n    return {\r\n        fields: readonly(fields),\r\n        remove,\r\n        push,\r\n        swap,\r\n        insert,\r\n        update,\r\n        replace,\r\n        prepend,\r\n    };\r\n}\n\nconst FieldArrayImpl = defineComponent({\r\n    name: 'FieldArray',\r\n    inheritAttrs: false,\r\n    props: {\r\n        name: {\r\n            type: String,\r\n            required: true,\r\n        },\r\n    },\r\n    setup(props, ctx) {\r\n        const { push, remove, swap, insert, replace, update, prepend, fields } = useFieldArray(toRef(props, 'name'));\r\n        function slotProps() {\r\n            return {\r\n                fields: fields.value,\r\n                push,\r\n                remove,\r\n                swap,\r\n                insert,\r\n                update,\r\n                replace,\r\n                prepend,\r\n            };\r\n        }\r\n        ctx.expose({\r\n            push,\r\n            remove,\r\n            swap,\r\n            insert,\r\n            update,\r\n            replace,\r\n            prepend,\r\n        });\r\n        return () => {\r\n            const children = normalizeChildren(undefined, ctx, slotProps);\r\n            return children;\r\n        };\r\n    },\r\n});\r\nconst FieldArray = FieldArrayImpl;\n\nconst ErrorMessageImpl = defineComponent({\r\n    name: 'ErrorMessage',\r\n    props: {\r\n        as: {\r\n            type: String,\r\n            default: undefined,\r\n        },\r\n        name: {\r\n            type: String,\r\n            required: true,\r\n        },\r\n    },\r\n    setup(props, ctx) {\r\n        const form = inject(FormContextKey, undefined);\r\n        const message = computed(() => {\r\n            return form === null || form === void 0 ? void 0 : form.errors.value[props.name];\r\n        });\r\n        function slotProps() {\r\n            return {\r\n                message: message.value,\r\n            };\r\n        }\r\n        return () => {\r\n            // Renders nothing if there are no messages\r\n            if (!message.value) {\r\n                return undefined;\r\n            }\r\n            const tag = (props.as ? resolveDynamicComponent(props.as) : props.as);\r\n            const children = normalizeChildren(tag, ctx, slotProps);\r\n            const attrs = Object.assign({ role: 'alert' }, ctx.attrs);\r\n            // If no tag was specified and there are children\r\n            // render the slot as is without wrapping it\r\n            if (!tag && (Array.isArray(children) || !children) && (children === null || children === void 0 ? void 0 : children.length)) {\r\n                return children;\r\n            }\r\n            // If no children in slot\r\n            // render whatever specified and fallback to a <span> with the message in it's contents\r\n            if ((Array.isArray(children) || !children) && !(children === null || children === void 0 ? void 0 : children.length)) {\r\n                return h(tag || 'span', attrs, message.value);\r\n            }\r\n            return h(tag, attrs, children);\r\n        };\r\n    },\r\n});\r\nconst ErrorMessage = ErrorMessageImpl;\n\nfunction useResetForm() {\r\n    const form = injectWithSelf(FormContextKey);\r\n    if (!form) {\r\n        warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\r\n    }\r\n    return function resetForm(state) {\r\n        if (!form) {\r\n            return;\r\n        }\r\n        return form.resetForm(state);\r\n    };\r\n}\n\n/**\r\n * If a field is dirty or not\r\n */\r\nfunction useIsFieldDirty(path) {\r\n    const form = injectWithSelf(FormContextKey);\r\n    let field = path ? undefined : inject(FieldContextKey);\r\n    return computed(() => {\r\n        if (path) {\r\n            field = normalizeField(form === null || form === void 0 ? void 0 : form.fieldsByPath.value[unref(path)]);\r\n        }\r\n        if (!field) {\r\n            warn(`field with name ${unref(path)} was not found`);\r\n            return false;\r\n        }\r\n        return field.meta.dirty;\r\n    });\r\n}\n\n/**\r\n * If a field is touched or not\r\n */\r\nfunction useIsFieldTouched(path) {\r\n    const form = injectWithSelf(FormContextKey);\r\n    let field = path ? undefined : inject(FieldContextKey);\r\n    return computed(() => {\r\n        if (path) {\r\n            field = normalizeField(form === null || form === void 0 ? void 0 : form.fieldsByPath.value[unref(path)]);\r\n        }\r\n        if (!field) {\r\n            warn(`field with name ${unref(path)} was not found`);\r\n            return false;\r\n        }\r\n        return field.meta.touched;\r\n    });\r\n}\n\n/**\r\n * If a field is validated and is valid\r\n */\r\nfunction useIsFieldValid(path) {\r\n    const form = injectWithSelf(FormContextKey);\r\n    let field = path ? undefined : inject(FieldContextKey);\r\n    return computed(() => {\r\n        if (path) {\r\n            field = normalizeField(form === null || form === void 0 ? void 0 : form.fieldsByPath.value[unref(path)]);\r\n        }\r\n        if (!field) {\r\n            warn(`field with name ${unref(path)} was not found`);\r\n            return false;\r\n        }\r\n        return field.meta.valid;\r\n    });\r\n}\n\n/**\r\n * If the form is submitting or not\r\n */\r\nfunction useIsSubmitting() {\r\n    const form = injectWithSelf(FormContextKey);\r\n    if (!form) {\r\n        warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\r\n    }\r\n    return computed(() => {\r\n        var _a;\r\n        return (_a = form === null || form === void 0 ? void 0 : form.isSubmitting.value) !== null && _a !== void 0 ? _a : false;\r\n    });\r\n}\n\n/**\r\n * Validates a single field\r\n */\r\nfunction useValidateField(path) {\r\n    const form = injectWithSelf(FormContextKey);\r\n    let field = path ? undefined : inject(FieldContextKey);\r\n    return function validateField() {\r\n        if (path) {\r\n            field = normalizeField(form === null || form === void 0 ? void 0 : form.fieldsByPath.value[unref(path)]);\r\n        }\r\n        if (!field) {\r\n            warn(`field with name ${unref(path)} was not found`);\r\n            return Promise.resolve({\r\n                errors: [],\r\n                valid: true,\r\n            });\r\n        }\r\n        return field.validate();\r\n    };\r\n}\n\n/**\r\n * If the form is dirty or not\r\n */\r\nfunction useIsFormDirty() {\r\n    const form = injectWithSelf(FormContextKey);\r\n    if (!form) {\r\n        warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\r\n    }\r\n    return computed(() => {\r\n        var _a;\r\n        return (_a = form === null || form === void 0 ? void 0 : form.meta.value.dirty) !== null && _a !== void 0 ? _a : false;\r\n    });\r\n}\n\n/**\r\n * If the form is touched or not\r\n */\r\nfunction useIsFormTouched() {\r\n    const form = injectWithSelf(FormContextKey);\r\n    if (!form) {\r\n        warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\r\n    }\r\n    return computed(() => {\r\n        var _a;\r\n        return (_a = form === null || form === void 0 ? void 0 : form.meta.value.touched) !== null && _a !== void 0 ? _a : false;\r\n    });\r\n}\n\n/**\r\n * If the form has been validated and is valid\r\n */\r\nfunction useIsFormValid() {\r\n    const form = injectWithSelf(FormContextKey);\r\n    if (!form) {\r\n        warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\r\n    }\r\n    return computed(() => {\r\n        var _a;\r\n        return (_a = form === null || form === void 0 ? void 0 : form.meta.value.valid) !== null && _a !== void 0 ? _a : false;\r\n    });\r\n}\n\n/**\r\n * Validate multiple fields\r\n */\r\nfunction useValidateForm() {\r\n    const form = injectWithSelf(FormContextKey);\r\n    if (!form) {\r\n        warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\r\n    }\r\n    return function validateField() {\r\n        if (!form) {\r\n            return Promise.resolve({ results: {}, errors: {}, valid: true });\r\n        }\r\n        return form.validate();\r\n    };\r\n}\n\n/**\r\n * The number of form's submission count\r\n */\r\nfunction useSubmitCount() {\r\n    const form = injectWithSelf(FormContextKey);\r\n    if (!form) {\r\n        warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\r\n    }\r\n    return computed(() => {\r\n        var _a;\r\n        return (_a = form === null || form === void 0 ? void 0 : form.submitCount.value) !== null && _a !== void 0 ? _a : 0;\r\n    });\r\n}\n\n/**\r\n * Gives access to a field's current value\r\n */\r\nfunction useFieldValue(path) {\r\n    const form = injectWithSelf(FormContextKey);\r\n    // We don't want to use self injected context as it doesn't make sense\r\n    const field = path ? undefined : inject(FieldContextKey);\r\n    return computed(() => {\r\n        if (path) {\r\n            return getFromPath(form === null || form === void 0 ? void 0 : form.values, unref(path));\r\n        }\r\n        return unref(field === null || field === void 0 ? void 0 : field.value);\r\n    });\r\n}\n\n/**\r\n * Gives access to a form's values\r\n */\r\nfunction useFormValues() {\r\n    const form = injectWithSelf(FormContextKey);\r\n    if (!form) {\r\n        warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\r\n    }\r\n    return computed(() => {\r\n        return (form === null || form === void 0 ? void 0 : form.values) || {};\r\n    });\r\n}\n\n/**\r\n * Gives access to all form errors\r\n */\r\nfunction useFormErrors() {\r\n    const form = injectWithSelf(FormContextKey);\r\n    if (!form) {\r\n        warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\r\n    }\r\n    return computed(() => {\r\n        return ((form === null || form === void 0 ? void 0 : form.errors.value) || {});\r\n    });\r\n}\n\n/**\r\n * Gives access to a single field error\r\n */\r\nfunction useFieldError(path) {\r\n    const form = injectWithSelf(FormContextKey);\r\n    // We don't want to use self injected context as it doesn't make sense\r\n    const field = path ? undefined : inject(FieldContextKey);\r\n    return computed(() => {\r\n        if (path) {\r\n            return form === null || form === void 0 ? void 0 : form.errors.value[unref(path)];\r\n        }\r\n        return field === null || field === void 0 ? void 0 : field.errorMessage.value;\r\n    });\r\n}\n\nfunction useSubmitForm(cb) {\r\n    const form = injectWithSelf(FormContextKey);\r\n    if (!form) {\r\n        warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\r\n    }\r\n    const onSubmit = form ? form.handleSubmit(cb) : undefined;\r\n    return function submitForm(e) {\r\n        if (!onSubmit) {\r\n            return;\r\n        }\r\n        return onSubmit(e);\r\n    };\r\n}\n\nexport { ErrorMessage, Field, FieldArray, FieldContextKey, Form, FormContextKey, configure, defineRule, useField, useFieldArray, useFieldError, useFieldValue, useForm, useFormErrors, useFormValues, useIsFieldDirty, useIsFieldTouched, useIsFieldValid, useIsFormDirty, useIsFormTouched, useIsFormValid, useIsSubmitting, useResetForm, useSubmitCount, useSubmitForm, useValidateField, useValidateForm, validate };\n","import { render } from \"./SignIn.vue?vue&type=template&id=76c1a048&scoped=true\"\nimport script from \"./SignIn.vue?vue&type=script&lang=js\"\nexport * from \"./SignIn.vue?vue&type=script&lang=js\"\n\nimport \"./SignIn.vue?vue&type=style&index=0&id=76c1a048&scoped=true&lang=css\"\n\nimport exportComponent from \"E:\\\\WOn\\\\WEB Development\\\\FullStack\\\\f1master_frontend\\\\node_modules\\\\vue-loader-v16\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-76c1a048\"]])\n\nexport default __exports__","import { render } from \"./SuperLicense.vue?vue&type=template&id=d35e533e&scoped=true\"\nimport script from \"./SuperLicense.vue?vue&type=script&lang=js\"\nexport * from \"./SuperLicense.vue?vue&type=script&lang=js\"\n\nimport \"./SuperLicense.vue?vue&type=style&index=0&id=d35e533e&scoped=true&lang=css\"\n\nimport exportComponent from \"E:\\\\WOn\\\\WEB Development\\\\FullStack\\\\f1master_frontend\\\\node_modules\\\\vue-loader-v16\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-d35e533e\"]])\n\nexport default __exports__","export * from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--7-oneOf-1-0!../../../node_modules/css-loader/dist/cjs.js??ref--7-oneOf-1-1!../../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--7-oneOf-1-2!../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/vue-loader-v16/dist/index.js??ref--1-1!./SignIn.vue?vue&type=style&index=0&id=76c1a048&scoped=true&lang=css\""],"sourceRoot":""}